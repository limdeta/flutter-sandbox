import 'package:get_it/get_it.dart';
import 'package:tauzero/features/authentication/domain/entities/user.dart';
import 'package:tauzero/features/authentication/domain/value_objects/phone_number.dart';
import 'package:tauzero/features/authentication/domain/repositories/iuser_repository.dart';
import 'package:tauzero/features/authentication/domain/services/password_service.dart';

class UserFixtureService {
  final IUserRepository _repository;
  
  UserFixtureService(this._repository);

  /// –°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  /// –õ–æ–≥–∏–Ω: +7-999-000-0001, –ü–∞—Ä–æ–ª—å: password123
  Future<User> createAdmin() async {
    final phoneResult = PhoneNumber.create('+7-999-000-0001');
    if (phoneResult.isLeft()) {
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }
    
    final userResult = User.create(
      externalId: 'admin_001',
      lastName: '–ê–¥–º–∏–Ω–æ–≤',
      firstName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä',
      middleName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤–∏—á',
      role: UserRole.admin,
      phoneNumber: phoneResult.fold((l) => throw Exception(l), (r) => r),
      hashedPassword: PasswordService.hashPassword('password123'),
    );
    
    if (userResult.isLeft()) {
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${userResult.fold((l) => l, (r) => '')}');
    }
    
    final admin = userResult.fold((l) => throw Exception(l), (r) => r);
    final createResult = await _repository.createUser(admin);
    
    if (createResult.isLeft()) {
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${createResult.fold((l) => l, (r) => '')}');
    }
    
    return admin;
  }

  /// –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  /// –õ–æ–≥–∏–Ω: +7-999-000-0002, –ü–∞—Ä–æ–ª—å: password123
  Future<User> createManager() async {
    final phoneResult = PhoneNumber.create('+7-999-000-0002');
    if (phoneResult.isLeft()) {
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
    }
    
    final userResult = User.create(
      externalId: 'manager_001',
      lastName: '–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤',
      firstName: '–ú–∏—Ö–∞–∏–ª',
      middleName: '–ú–∏—Ö–∞–π–ª–æ–≤–∏—á',
      role: UserRole.manager,
      phoneNumber: phoneResult.fold((l) => throw Exception(l), (r) => r),
      hashedPassword: PasswordService.hashPassword('password123'),
    );
    
    if (userResult.isLeft()) {
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${userResult.fold((l) => l, (r) => '')}');
    }
    
    final manager = userResult.fold((l) => throw Exception(l), (r) => r);
    final createResult = await _repository.createUser(manager);
    
    if (createResult.isLeft()) {
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${createResult.fold((l) => l, (r) => '')}');
    }
    
    return manager;
  }

  /// –°–æ–∑–¥–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  /// –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π: password123
  Future<User> createSalesRep({
    required String name,
    required String email, // –¥–ª—è externalId
    required String phone,
  }) async {
    final nameParts = name.split(' ');
    final lastName = nameParts.isNotEmpty ? nameParts[0] : '–¢–æ—Ä–≥–æ–≤—ã–π';
    final firstName = nameParts.length > 1 ? nameParts[1] : '–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å';
    final middleName = nameParts.length > 2 ? nameParts[2] : null;
    
    final phoneResult = PhoneNumber.create(phone);
    if (phoneResult.isLeft()) {
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ $phone: ${phoneResult.fold((l) => l, (r) => '')}');
    }
    
    final userResult = User.create(
      externalId: email, // –ò—Å–ø–æ–ª—å–∑—É–µ–º email –∫–∞–∫ externalId
      lastName: lastName,
      firstName: firstName,
      middleName: middleName,
      role: UserRole.user,
      phoneNumber: phoneResult.fold((l) => throw Exception(l), (r) => r),
      hashedPassword: PasswordService.hashPassword('password123'),
    );
    
    if (userResult.isLeft()) {
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è $name: ${userResult.fold((l) => l, (r) => '')}');
    }
    
    final salesRep = userResult.fold((l) => throw Exception(l), (r) => r);
    final createResult = await _repository.createUser(salesRep);
    
    if (createResult.isLeft()) {
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è $name: ${createResult.fold((l) => l, (r) => '')}');
    }
    
    return salesRep;
  }

  Future<void> clearAllUsers() async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–¥–∞–ª—è–µ–º dev-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      final allUsersResult = await _repository.getAllUsers();
      
      await allUsersResult.fold(
        (failure) async {
          print('‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${failure.message}');
        },
        (allUsers) async {
          for (final user in allUsers) {
            // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å dev –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –∏–ª–∏ email
            if (_isDevUser(user)) {
              final deleteResult = await _repository.deleteUser(user.externalId);
              deleteResult.fold(
                (failure) => print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ${user.fullName}: ${failure.message}'),
                (_) => {}, // –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω
              );
            }
          }
          
          print('üßπ Dev –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—á–∏—â–µ–Ω—ã');
        },
      );
    } catch (e) {
      print('‚ÑπÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $e');
    }
  }

  bool _isDevUser(User user) {
    return user.externalId.startsWith('admin_') ||
           user.externalId.startsWith('manager_') ||
           user.externalId.contains('@tauzero.dev') ||
           user.lastName == '–ê–¥–º–∏–Ω–æ–≤' ||
           user.lastName == '–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤' ||
           user.lastName == '–¢–æ—Ä–≥–æ–≤—ã–π' ||
           user.lastName == '–ü—Ä–æ–¥–∞–∂–∫–∏–Ω–∞' ||
           user.lastName == '–ö—É—Ä—å–µ—Ä–æ–≤' ||
           user.lastName == '–î–æ—Å—Ç–∞–≤–∫–∏–Ω–∞' ||
           user.lastName == '–ë—ã—Å—Ç—Ä–æ–≤';
  }
}

class UserFixtureServiceFactory {
  static UserFixtureService create() {
    final repository = GetIt.instance<IUserRepository>();
    return UserFixtureService(repository);
  }
}
