import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';
import 'package:provider/provider.dart';
import '../../../route/domain/entities/route.dart' as domain;
import '../../../route/domain/repositories/iroute_repository.dart';
import '../../../authentication/domain/entities/user.dart';
import '../../../authentication/domain/repositories/iuser_repository.dart';
import '../../../authentication/domain/usecases/get_current_session_usecase.dart';
import '../../../route/presentation/pages/route_detail_page.dart';
import '../../../map/presentation/widgets/map_widget.dart';
import '../../../tracking/domain/repositories/iuser_track_repository.dart';
import '../../../tracking/domain/entities/user_track.dart';
import '../../../../shared/providers/selected_route_provider.dart';

/// –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –∫–∞—Ä—Ç–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è
class SalesRepHomePage extends StatefulWidget {
  final domain.Route? selectedRoute; // –ú–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞

  const SalesRepHomePage({
    super.key,
    this.selectedRoute,
  });

  @override
  State<SalesRepHomePage> createState() => _SalesRepHomePageState();
}

class _SalesRepHomePageState extends State<SalesRepHomePage> {
  final IRouteRepository _routeRepository = GetIt.instance<IRouteRepository>();
  final GetCurrentSessionUseCase _getCurrentSessionUseCase = GetIt.instance<GetCurrentSessionUseCase>();
  final IUserTrackRepository _trackRepository = GetIt.instance<IUserTrackRepository>();
  
  User? _currentUser;
  domain.Route? _currentRoute;
  List<UserTrack> _historicalTracks = [];
  bool _isLoading = true;
  String? _error;
  bool _showRoutePanel = true;
  bool _hasLoadedInitialRoute = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏

  @override
  void initState() {
    super.initState();
    _loadUserAndRoutes();
  }

  Future<void> _loadUserAndRoutes() async {
    try {
      setState(() {
        _isLoading = true;
        _error = null;
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final sessionResult = await _getCurrentSessionUseCase.call();
      if (sessionResult.isLeft()) {
        setState(() {
          _error = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
          _isLoading = false;
        });
        return;
      }

      final session = sessionResult.fold((l) => throw Exception(l), (r) => r);
      _currentUser = session?.user;

      if (_currentUser == null) {
        setState(() {
          _error = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏';
          _isLoading = false;
        });
        return;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await _loadHistoricalTracks();

      // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      _routeRepository.watchUserRoutes(_currentUser!).listen(
        (routes) async {
          if (mounted) {
            final selectedRouteProvider = Provider.of<SelectedRouteProvider>(context, listen: false);
            
            domain.Route? routeToDisplay;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
            if (!_hasLoadedInitialRoute) {
              // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç ‚Üí —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä
              if (widget.selectedRoute != null) {
                // 1. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                routeToDisplay = widget.selectedRoute!;
                await selectedRouteProvider.setSelectedRoute(routeToDisplay);
                print('üìç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: ${routeToDisplay.name}');
              } else {
                // 2. –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                final savedRouteFound = await selectedRouteProvider.loadSavedSelection(routes);
                
                if (savedRouteFound && selectedRouteProvider.selectedRoute != null) {
                  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                  routeToDisplay = selectedRouteProvider.selectedRoute!;
                  print('üìç –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: ${routeToDisplay.name}');
                } else {
                  // 3. Fallback: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
                  routeToDisplay = _findCurrentRoute(routes);
                  if (routeToDisplay != null) {
                    await selectedRouteProvider.setSelectedRoute(routeToDisplay);
                    print('üìç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –º–∞—Ä—à—Ä—É—Ç: ${routeToDisplay.name}');
                  }
                }
              }
              
              _hasLoadedInitialRoute = true; // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            } else {
              // –ü—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
              routeToDisplay = selectedRouteProvider.selectedRoute ?? _currentRoute;
            }
            
            setState(() {
              _currentRoute = routeToDisplay;
              _isLoading = false;
            });
          }
        },
        onError: (error) {
          if (mounted) {
            setState(() {
              _error = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤: $error';
              _isLoading = false;
            });
          }
        },
      );
    } catch (e) {
      setState(() {
        _error = '–û—à–∏–±–∫–∞: $e';
        _isLoading = false;
      });
    }
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> _loadHistoricalTracks() async {
    if (_currentUser == null) return;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ ID
      final userRepository = GetIt.instance<IUserRepository>();
      final usersResult = await userRepository.getAllUsers();
      
      if (usersResult.isLeft()) {
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: ${usersResult.fold((l) => l, (r) => '')}');
        return;
      }
      
      final allUsers = usersResult.fold((l) => <User>[], (r) => r);
      final dbUser = allUsers.where((u) => u.externalId == _currentUser!.externalId).firstOrNull;
      
      if (dbUser == null) {
        print('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${_currentUser!.firstName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π userId (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ + 1)
      final userId = allUsers.indexOf(dbUser) + 1;
      
      final tracks = await _trackRepository.getTracksByUserId(userId);
      if (mounted) {
        setState(() {
          _historicalTracks = tracks;
        });
        print('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${tracks.length} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${_currentUser!.firstName} (userId: $userId)');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤: $e');
    }
  }

  domain.Route? _findCurrentRoute(List<domain.Route> routes) {
    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    var activeRoute = routes.where((r) => r.status == domain.RouteStatus.active).firstOrNull;
    if (activeRoute != null) return activeRoute;
    
    // –ò—â–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç
    final today = DateTime.now();
    var todayRoute = routes.where((r) {
      return r.startTime != null && 
             r.startTime!.year == today.year &&
             r.startTime!.month == today.month &&
             r.startTime!.day == today.day;
    }).firstOrNull;
    if (todayRoute != null) return todayRoute;
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    return routes.isNotEmpty ? routes.first : null;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // –ö–∞—Ä—Ç–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –≤–µ—Å—å —ç–∫—Ä–∞–Ω
          _buildMapArea(),
          
          // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å: –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é + –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ
          if (!_isLoading && _currentRoute != null)
            _buildTopPanelWithMenu(),
          
          // –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ —Ç–æ—á–∫–∞–º (—Å–∫—Ä—ã–≤–∞–µ–º–∞—è)
          if (!_isLoading && _currentRoute != null && _showRoutePanel)
            _buildBottomPanel(),
          
          // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
          if (_isLoading)
            _buildLoadingOverlay(),
            
          // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          if (_error != null)
            _buildErrorOverlay(),
        ],
      ),
    );
  }

  Widget _buildMapArea() {
    return Consumer<SelectedRouteProvider>(
      builder: (context, selectedRouteProvider, child) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–∞—Ä—à—Ä—É—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
        final routeToShow = selectedRouteProvider.selectedRoute ?? _currentRoute;
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
        final filteredTracks = routeToShow != null && routeToShow.id != null
            ? _historicalTracks.where((track) => track.routeId == routeToShow.id).toList()
            : _historicalTracks;
        
        return MapWidget(
          route: routeToShow,
          historicalTracks: filteredTracks, // –ü–µ—Ä–µ–¥–∞–µ–º —Ç—Ä–µ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ MapWidget
          onTap: (point) {
            // TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞—Ä—Ç—É
            print('–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–∞—Ä—Ç—É: ${point.latitude}, ${point.longitude}');
          },
        );
      },
    );
  }

  Widget _buildTopPanelWithMenu() {
    return Consumer<SelectedRouteProvider>(
      builder: (context, selectedRouteProvider, child) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–∞—Ä—à—Ä—É—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
        final routeToShow = selectedRouteProvider.selectedRoute ?? _currentRoute;
        
        if (routeToShow == null) return const SizedBox.shrink();
        
        return Positioned(
          top: MediaQuery.of(context).padding.top,
          left: 0,
          right: 0,
          child: Container(
            decoration: BoxDecoration(
              color: Colors.white,
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  offset: const Offset(0, 2),
                  blurRadius: 4,
                ),
              ],
            ),
            child: Row(
              children: [
                // –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é
                Container(
                  width: 60,
                  height: 60,
                  decoration: const BoxDecoration(
                    color: Colors.blue,
                  ),
                  child: IconButton(
                    onPressed: () {
                      Navigator.pushNamed(context, '/menu');
                    },
                    icon: const Icon(Icons.menu, color: Colors.white, size: 24),
                  ),
                ),
                
                // –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è)
                Expanded(
                  child: GestureDetector(
                    onTap: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => RouteDetailPage(route: routeToShow),
                        ),
                      );
                    },
                    child: Container(
                      height: 60,
                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          // –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
                          Text(
                            routeToShow.name,
                            style: const TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 16,
                            ),
                            maxLines: 1,
                            overflow: TextOverflow.ellipsis,
                          ),
                          
                          // –°—Ç–∞—Ç—É—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
                          Row(
                            children: [
                              Text(
                                _getRouteStatusText(routeToShow.status),
                                style: TextStyle(
                                  color: _getRouteStatusColor(routeToShow.status),
                                  fontSize: 12,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                              const Text(
                                ' ‚Ä¢ ',
                                style: TextStyle(
                                  color: Colors.grey,
                                  fontSize: 12,
                                ),
                              ),
                              Text(
                                '${routeToShow.pointsOfInterest.length} —Ç–æ—á–µ–∫',
                                style: const TextStyle(
                                  color: Colors.grey,
                                  fontSize: 12,
                                ),
                              ),
                              const Text(
                                ' ‚Ä¢ ',
                                style: TextStyle(
                                  color: Colors.grey,
                                  fontSize: 12,
                                ),
                              ),
                              Text(
                                '${_getCompletedCount()} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
                                style: const TextStyle(
                                  color: Colors.grey,
                                  fontSize: 12,
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
                
                // –ö–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –Ω–∏–∂–Ω—é—é –ø–∞–Ω–µ–ª—å
                Container(
                  width: 50,
                  height: 60,
                  decoration: BoxDecoration(
                    color: Colors.grey.shade100,
                    border: Border(
                      left: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  child: IconButton(
                    icon: Icon(
                      _showRoutePanel ? Icons.keyboard_arrow_up : Icons.keyboard_arrow_down,
                      color: Colors.grey.shade700,
                    ),
                    onPressed: () {
                      setState(() {
                        _showRoutePanel = !_showRoutePanel;
                      });
                    },
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildBottomPanel() {
    final currentPoint = _currentRoute!.currentPoint;
    final currentIndex = currentPoint != null 
        ? _currentRoute!.pointsOfInterest.indexOf(currentPoint)
        : 0;
    
    return Positioned(
      bottom: 0,
      left: 0,
      right: 0,
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white,
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              offset: const Offset(0, -2),
              blurRadius: 4,
            ),
          ],
        ),
        padding: const EdgeInsets.all(16),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
              Row(
                children: [
                  Expanded(
                    child: LinearProgressIndicator(
                      value: _currentRoute!.completionPercentage,
                      backgroundColor: Colors.grey[300],
                      valueColor: AlwaysStoppedAnimation<Color>(
                        _getRouteStatusColor(_currentRoute!.status),
                      ),
                    ),
                  ),
                  const SizedBox(width: 8),
                  Text(
                    '${(_currentRoute!.completionPercentage * 100).round()}%',
                    style: const TextStyle(
                      fontSize: 12,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 12),
              
              // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–æ—á–∫–∞–º
              if (currentPoint != null) ...[
                Row(
                  children: [
                    IconButton(
                      icon: const Icon(Icons.arrow_back_ios),
                      onPressed: currentIndex > 0 ? () {
                        // TODO: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–µ
                      } : null,
                    ),
                    Expanded(
                      child: Column(
                        children: [
                          Text(
                            '${currentIndex + 1} –∏–∑ ${_currentRoute!.pointsOfInterest.length}',
                            style: const TextStyle(
                              fontSize: 12,
                              color: Colors.grey,
                            ),
                          ),
                          Text(
                            currentPoint.name,
                            style: const TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ],
                      ),
                    ),
                    IconButton(
                      icon: const Icon(Icons.arrow_forward_ios),
                      onPressed: currentIndex < _currentRoute!.pointsOfInterest.length - 1 ? () {
                        // TODO: –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ
                      } : null,
                    ),
                  ],
                ),
              ] else ...[
                const Text(
                  '–í—Å–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.green,
                  ),
                ),
              ],
            ],
          ),
        ),
    );
  }

  Widget _buildLoadingOverlay() {
    return Container(
      color: Colors.black.withOpacity(0.3),
      child: const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CircularProgressIndicator(),
            SizedBox(height: 16),
            Text(
              '–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞...',
              style: TextStyle(
                color: Colors.white,
                fontSize: 16,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildErrorOverlay() {
    return Container(
      color: Colors.black.withOpacity(0.3),
      child: Center(
        child: Card(
          margin: const EdgeInsets.all(32),
          child: Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                const Icon(
                  Icons.error_outline,
                  size: 48,
                  color: Colors.red,
                ),
                const SizedBox(height: 16),
                Text(
                  _error!,
                  textAlign: TextAlign.center,
                  style: const TextStyle(fontSize: 16),
                ),
                const SizedBox(height: 16),
                ElevatedButton(
                  onPressed: _loadUserAndRoutes,
                  child: const Text('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Color _getRouteStatusColor(domain.RouteStatus status) {
    switch (status) {
      case domain.RouteStatus.planned:
        return Colors.blue;
      case domain.RouteStatus.active:
        return Colors.orange;
      case domain.RouteStatus.completed:
        return Colors.green;
      case domain.RouteStatus.cancelled:
        return Colors.red;
      case domain.RouteStatus.paused:
        return Colors.grey;
    }
  }

  String _getRouteStatusText(domain.RouteStatus status) {
    switch (status) {
      case domain.RouteStatus.planned:
        return '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω';
      case domain.RouteStatus.active:
        return '–ê–∫—Ç–∏–≤–Ω—ã–π';
      case domain.RouteStatus.completed:
        return '–ó–∞–≤–µ—Ä—à–µ–Ω';
      case domain.RouteStatus.cancelled:
        return '–û—Ç–º–µ–Ω–µ–Ω';
      case domain.RouteStatus.paused:
        return '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
    }
  }

  int _getCompletedCount() {
    return _currentRoute!.pointsOfInterest
        .where((point) => point.isVisited)
        .length;
  }
}
