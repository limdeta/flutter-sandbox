import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';
import 'package:tauzero/features/authentication/domain/entities/user.dart';
import 'package:tauzero/features/authentication/domain/repositories/iuser_repository.dart';

import '../../../route/domain/entities/route.dart' as domain;
import '../../../route/domain/entities/ipoint_of_interest.dart';
import '../../../route/domain/repositories/iroute_repository.dart';
import '../../../route/data/di/route_di.dart';

/// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
/// 
/// –§—É–Ω–∫—Ü–∏–∏:
/// - üë• –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
/// - üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏  
/// - üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
/// - ‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
class AdminDashboardPage extends StatefulWidget {
  const AdminDashboardPage({super.key});

  @override
  State<AdminDashboardPage> createState() => _AdminDashboardPageState();
}

class _AdminDashboardPageState extends State<AdminDashboardPage>
    with TickerProviderStateMixin {
  late TabController _tabController;
  late IRouteRepository _routeRepository;
  late IUserRepository _userRepository;
  List<User> _users = [];

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 4, vsync: this);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DI –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!GetIt.instance.isRegistered<IRouteRepository>()) {
      RouteDI.registerDependencies();
    }
    
    _routeRepository = GetIt.instance<IRouteRepository>();
    _userRepository = GetIt.instance<IUserRepository>();
    _loadUsers();
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  Future<void> _loadUsers() async {
    final result = await _userRepository.getAllUsers();
    result.fold(
      (failure) {
        // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${failure.message}');
      },
      (users) => setState(() {
        _users = users;
      }),
    );
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  List<User> get _Users {
    return _users; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∫ –µ—Å—Ç—å –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('üìä Admin Dashboard'),
        backgroundColor: Colors.blue[800],
        foregroundColor: Colors.white,
        bottom: TabBar(
          controller: _tabController,
          labelColor: Colors.white,
          unselectedLabelColor: Colors.white70,
          indicatorColor: Colors.white,
          tabs: const [
            Tab(icon: Icon(Icons.dashboard), text: '–û–±–∑–æ—Ä'),
            Tab(icon: Icon(Icons.people), text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'),
            Tab(icon: Icon(Icons.route), text: '–ú–∞—Ä—à—Ä—É—Ç—ã'),
            Tab(icon: Icon(Icons.settings), text: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          _buildOverviewTab(),
          _buildUsersTab(),
          _buildRoutesTab(),
          _buildManagementTab(),
        ],
      ),
    );
  }

  /// –í–∫–ª–∞–¥–∫–∞ "–û–±–∑–æ—Ä" - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  Widget _buildOverviewTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // –ó–∞–≥–æ–ª–æ–≤–æ–∫
          Row(
            children: [
              Icon(Icons.dashboard, color: Colors.blue[800], size: 28),
              const SizedBox(width: 12),
              const Text(
                '–û–±—â–∏–π –æ–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã',
                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
              ),
            ],
          ),
          const SizedBox(height: 24),

          // –ö–∞—Ä—Ç–æ—á–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
          GridView.count(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            crossAxisCount: 2,
            crossAxisSpacing: 16,
            mainAxisSpacing: 16,
            childAspectRatio: 1.5,
            children: [
              _buildMetricCard(
                title: '–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                value: '${_Users.length}',
                icon: Icons.people,
                color: Colors.green,
              ),
              _buildMetricCard(
                title: '–ú–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è',
                value: '0', // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                icon: Icons.route,
                color: Colors.blue,
              ),
              _buildMetricCard(
                title: '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å',
                value: '0%', // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏  
                icon: Icons.check_circle,
                color: Colors.orange,
              ),
              _buildMetricCard(
                title: '–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤',
                value: '0', // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                icon: Icons.warning,
                color: Colors.red,
              ),
            ],
          ),

          const SizedBox(height: 32),

          // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    '‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600),
                  ),
                  const SizedBox(height: 16),
                  Wrap(
                    spacing: 12,
                    runSpacing: 12,
                    children: [
                      ElevatedButton.icon(
                        onPressed: () => _showSystemInfo(),
                        icon: const Icon(Icons.info),
                        label: const Text('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.blue,
                          foregroundColor: Colors.white,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// –í–∫–ª–∞–¥–∫–∞ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  Widget _buildUsersTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // –ó–∞–≥–æ–ª–æ–≤–æ–∫
          Row(
            children: [
              Icon(Icons.people, color: Colors.blue[800], size: 28),
              const SizedBox(width: 12),
              const Text(
                '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
              ),
            ],
          ),
          const SizedBox(height: 24),

          // –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          ...(_Users.map((user) => _buildUserCard(user)).toList()),
        ],
      ),
    );
  }

  /// –í–∫–ª–∞–¥–∫–∞ "–ú–∞—Ä—à—Ä—É—Ç—ã" - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
  Widget _buildRoutesTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // –ó–∞–≥–æ–ª–æ–≤–æ–∫
          Row(
            children: [
              Icon(Icons.route, color: Colors.blue[800], size: 28),
              const SizedBox(width: 12),
              const Text(
                '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ä—à—Ä—É—Ç–æ–≤',
                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
              ),
            ],
          ),
          const SizedBox(height: 24),

          // –ú–∞—Ä—à—Ä—É—Ç—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
          ...(_Users.map((user) => _buildUserRoutesSection(user)).toList()),
        ],
      ),
    );
  }

  /// –í–∫–ª–∞–¥–∫–∞ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  Widget _buildManagementTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // –ó–∞–≥–æ–ª–æ–≤–æ–∫
          Row(
            children: [
              Icon(Icons.settings, color: Colors.blue[800], size: 28),
              const SizedBox(width: 12),
              const Text(
                '–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
              ),
            ],
          ),
          const SizedBox(height: 24),

          // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–∫—Å—Ç—É—Ä–∞–º–∏
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600),
                  ),
                  const SizedBox(height: 16),
                  const Text(
                    '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã.',
                    style: TextStyle(color: Colors.grey),
                  ),
                  const SizedBox(height: 16),
                  Column(
                    children: _Users.map((user) => ListTile(
                      leading: CircleAvatar(
                        backgroundColor: Colors.blue[100],
                        child: Text(user.fullName.substring(0, 1)),
                      ),
                      title: Text(user.fullName),
                      subtitle: Text('${user.role} ‚Ä¢}'),
                    )).toList(),
                  ),
                ],
              ),
            ),
          ),

          const SizedBox(height: 24),

          // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600),
                  ),
                  const SizedBox(height: 16),
                  Row(
                    children: [
                      ElevatedButton.icon(
                        onPressed: _exportAllData,
                        icon: const Icon(Icons.download),
                        label: const Text('–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö'),
                      ),
                      const SizedBox(width: 16),
                      ElevatedButton.icon(
                        onPressed: _generateReport,
                        icon: const Icon(Icons.analytics),
                        label: const Text('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç'),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –º–µ—Ç—Ä–∏–∫–∏
  Widget _buildMetricCard({
    required String title,
    required String value,
    required IconData icon,
    required Color color,
  }) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, color: color, size: 32),
            const SizedBox(height: 8),
            Text(
              value,
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: color,
              ),
            ),
            const SizedBox(height: 4),
            Text(
              title,
              textAlign: TextAlign.center,
              style: const TextStyle(
                fontSize: 12,
                color: Colors.grey,
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Widget _buildUserCard(User user) {
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      child: ExpansionTile(
        leading: CircleAvatar(
          backgroundColor: Colors.blue[100],
          child: Text(user.fullName.substring(0, 1)),
        ),
        title: Text(user.fullName),
            children: [
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('ID: ${user.externalId}'),
                const SizedBox(height: 8),
                Text('–†–æ–ª—å: ${user.role}'),
                const SizedBox(height: 8),
                
                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±—É–¥–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π)
                FutureBuilder<List<domain.Route>>(
                  future: _routeRepository.watchUserRoutes(user).first,
                  builder: (context, snapshot) {
                    if (snapshot.hasData) {
                      final routes = snapshot.data!;
                      final completedRoutes = routes.where((r) => r.isCompleted).length;
                      final activeRoutes = routes.where((r) => r.isActive).length;
                      final averageCompletion = routes.isEmpty ? 0.0 :
                          routes.map((r) => r.completionPercentage).reduce((a, b) => a + b) / routes.length;
                      
                      return Column(
                        children: [
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceAround,
                            children: [
                              _buildUserStat('–í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤', '${routes.length}'),
                              _buildUserStat('–ó–∞–≤–µ—Ä—à–µ–Ω–æ', '$completedRoutes'),
                              _buildUserStat('–ê–∫—Ç–∏–≤–Ω—ã—Ö', '$activeRoutes'),
                              _buildUserStat('–°—Ä. –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å', '${(averageCompletion * 100).toStringAsFixed(0)}%'),
                            ],
                          ),
                          const SizedBox(height: 16),
                          Row(
                            children: [
                              Expanded(
                                child: ElevatedButton(
                                  onPressed: () => _viewUserRoutes(user),
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.blue[100],
                                    foregroundColor: Colors.blue[800],
                                  ),
                                  child: const Text('–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤'),
                                ),
                              ),
                            ],
                          ),
                        ],
                      );
                    }
                    return const CircularProgressIndicator();
                  },
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  /// –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Widget _buildUserStat(String label, String value) {
    return Column(
      children: [
        Text(
          value,
          style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        Text(
          label,
          style: const TextStyle(fontSize: 12, color: Colors.grey),
          textAlign: TextAlign.center,
        ),
      ],
    );
  }

  /// –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Widget _buildUserRoutesSection(User user) {
    return Card(
      margin: const EdgeInsets.only(bottom: 16),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'üë§ ${user.fullName}',
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.w600),
            ),
            const SizedBox(height: 12),
            
            StreamBuilder<List<domain.Route>>(
              stream: _routeRepository.watchUserRoutes(user),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }
                
                if (snapshot.hasError) {
                  return Text('–û—à–∏–±–∫–∞: ${snapshot.error}');
                }
                
                final routes = snapshot.data ?? [];
                
                if (routes.isEmpty) {
                  return const Text(
                    '–ù–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.',
                    style: TextStyle(color: Colors.grey),
                  );
                }
                
                return Column(
                  children: routes.map((route) => _buildRouteCard(route, user)).toList(),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  /// –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
  Widget _buildRouteCard(domain.Route route, User user) {
    final statusColor = _getRouteStatusColor(route.status);
    
    return Card(
      margin: const EdgeInsets.only(bottom: 8),
      child: ListTile(
        leading: Container(
          width: 12,
          height: 12,
          decoration: BoxDecoration(
            color: statusColor,
            shape: BoxShape.circle,
          ),
        ),
        title: Text(route.name),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('–°—Ç–∞—Ç—É—Å: ${route.status.name}'),
            Text('–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å: ${(route.completionPercentage * 100).toStringAsFixed(1)}%'),
            Text('–¢–æ—á–µ–∫: ${route.pointsOfInterest.length}'),
            if (route.isProblematic)
              const Text(
                '‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç',
                style: TextStyle(color: Colors.orange),
              ),
          ],
        ),
        trailing: PopupMenuButton(
          itemBuilder: (context) => [
            PopupMenuItem(
              value: 'details',
              child: const Text('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏'),
              onTap: () => _showRouteDetails(route, user),
            ),
            PopupMenuItem(
              value: 'map',
              child: const Text('–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ'),
              onTap: () => _showRouteOnMap(route),
            ),
          ],
        ),
      ),
    );
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ä—à—Ä—É—Ç–∞
  Color _getRouteStatusColor(domain.RouteStatus status) {
    switch (status) {
      case domain.RouteStatus.planned:
        return Colors.grey;
      case domain.RouteStatus.active:
        return Colors.blue;
      case domain.RouteStatus.completed:
        return Colors.green;
      case domain.RouteStatus.cancelled:
        return Colors.red;
      case domain.RouteStatus.paused:
        return Colors.orange;
    }
  }

  // =====================================================
  // –î–ï–ô–°–¢–í–ò–Ø –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
  // =====================================================

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  void _showSystemInfo() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('üèóÔ∏è Architecture: Clean Architecture'),
            Text('üóÑÔ∏è Database: Drift (SQLite)'),
            Text('üîÑ State: Reactive Streams'),
            Text('üß™ Environment: Development'),
            Text('üë• Users: Test fixtures'),
            Text('üì± Platform: Flutter'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }

  /// –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  void _viewUserRoutes(User user) {
    // TODO: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤ ${user.fullName} (TODO)')),
    );
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç–∞
  void _showRouteDetails(domain.Route route, User user) {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        child: Container(
          width: 400,
          height: 600,
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'üìã ${route.name}',
                style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 16),
              Text('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.fullName}'),
              Text('üìÖ –°–æ–∑–¥–∞–Ω: ${route.createdAt.toString().substring(0, 16)}'),
              Text('üîÑ –°—Ç–∞—Ç—É—Å: ${route.status.name}'),
              Text('üìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å: ${(route.completionPercentage * 100).toStringAsFixed(1)}%'),
              if (route.description != null)
                Text('üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${route.description}'),
              const SizedBox(height: 16),
              const Text(
                '–¢–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞:',
                style: TextStyle(fontWeight: FontWeight.w600),
              ),
              const SizedBox(height: 8),
              Expanded(
                child: ListView.builder(
                  itemCount: route.pointsOfInterest.length,
                  itemBuilder: (context, index) {
                    final point = route.pointsOfInterest[index];
                    return ListTile(
                      leading: Container(
                        width: 12,
                        height: 12,
                        decoration: BoxDecoration(
                          color: _getPointStatusColor(point.status),
                          shape: BoxShape.circle,
                        ),
                      ),
                      title: Text(point.name),
                      subtitle: Text('${point.status.name} ‚Ä¢ ${point.type.name}'),
                      dense: true,
                    );
                  },
                ),
              ),
              const SizedBox(height: 16),
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  TextButton(
                    onPressed: () => Navigator.of(context).pop(),
                    child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—á–∫–∏
  Color _getPointStatusColor(VisitStatus status) {
    switch (status) {
      case VisitStatus.planned:
        return Colors.grey;
      case VisitStatus.enRoute:
        return Colors.blue;
      case VisitStatus.arrived:
        return Colors.orange;
      case VisitStatus.completed:
        return Colors.green;
      case VisitStatus.skipped:
        return Colors.red;
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç–µ
  void _showRouteOnMap(domain.Route route) {
    // TODO: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –∫–∞—Ä—Ç–µ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç "${route.name}" –Ω–∞ –∫–∞—Ä—Ç–µ (TODO)')),
    );
  }

  /// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
  void _exportAllData() {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (TODO)')),
    );
  }

  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç
  void _generateReport() {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ (TODO)')),
    );
  }
}