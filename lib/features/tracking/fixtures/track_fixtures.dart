import 'dart:math' as math;
import 'package:get_it/get_it.dart';
import 'package:latlong2/latlong.dart';
import '../domain/repositories/iuser_track_repository.dart';
import '../domain/entities/user_track.dart';
import '../domain/entities/track_point.dart';
import '../../route/domain/entities/route.dart' as domain;
import '../../authentication/domain/entities/user.dart';
import '../../authentication/domain/repositories/iuser_repository.dart';

/// –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö GPS —Ç—Ä–µ–∫–æ–≤
class TrackFixtures {
  static Future<void> createTestTracksForUser({
    required User user,
    required List<domain.Route> routes,
  }) async {
    final trackRepository = GetIt.instance<IUserTrackRepository>();
    final userRepository = GetIt.instance<IUserRepository>();
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      final usersResult = await userRepository.getAllUsers();
      if (usersResult.isLeft()) {
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: ${usersResult.fold((l) => l, (r) => '')}');
        return;
      }
      
      final allUsers = usersResult.fold((l) => <User>[], (r) => r);
      final dbUser = allUsers.where((u) => u.externalId == user.externalId).firstOrNull;
      
      if (dbUser == null) {
        print('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.firstName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π userId (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ + 1)
      final userId = allUsers.indexOf(dbUser) + 1;
      
      // –ù–∞—Ö–æ–¥–∏–º –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
      final yesterdayRoute = routes.where((r) => r.name.contains('30 –∏—é–ª—è')).firstOrNull;
      final todayRoute = routes.where((r) => r.name.contains('31 –∏—é–ª—è')).firstOrNull;
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–∫–∏
      if (yesterdayRoute?.id != null) {
        await _createCompletedTrack(trackRepository, user, yesterdayRoute!);
      }
      
      if (todayRoute?.id != null) {
        await _createActiveTrack(trackRepository, user, todayRoute!);
      }
      
      print('üéØ –¢–µ—Å—Ç–æ–≤—ã–µ GPS —Ç—Ä–µ–∫–∏ –¥–ª—è ${user.firstName} —Å–æ–∑–¥–∞–Ω—ã (userId: $userId)');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è ${user.firstName}: $e');
    }
  }
  
  /// –°–æ–∑–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ –¥–ª—è –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
  static Future<void> _createCompletedTrack(
    IUserTrackRepository repo, 
    User user, 
    domain.Route route,
  ) async {
    final yesterday = DateTime.now().subtract(const Duration(days: 1));
    
    final track = UserTrack(
      id: 0, // –ë—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      user: user,
      route: route,
      startTime: yesterday.copyWith(hour: 9, minute: 0),
      endTime: yesterday.copyWith(hour: 17, minute: 30),
      totalDistanceMeters: 15240.0,
      movingTimeSeconds: 7200, // 2 —á–∞—Å–∞ –¥–≤–∏–∂–µ–Ω–∏—è
      totalTimeSeconds: 30600, // 8.5 —á–∞—Å–æ–≤ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      averageSpeedKmh: 25.4,
      maxSpeedKmh: 55.0,
      status: TrackStatus.completed,
      points: _generateTrackPointsFromRoute(route, yesterday, isCompleted: true),
    );
    
    await repo.saveTrack(track);
    print('üìç –°–æ–∑–¥–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ (${track.points.length} —Ç–æ—á–µ–∫) –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ ${route.id}');
  }
  
  /// –°–æ–∑–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
  static Future<void> _createActiveTrack(
    IUserTrackRepository repo, 
    User user, 
    domain.Route route,
  ) async {
    final today = DateTime.now();
    
    final track = UserTrack(
      id: 0,
      user: user,
      route: route,
      startTime: today.copyWith(hour: 8, minute: 30),
      endTime: null, // –ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫
      totalDistanceMeters: 5680.0,
      movingTimeSeconds: 2400, // 40 –º–∏–Ω—É—Ç –¥–≤–∏–∂–µ–Ω–∏—è
      totalTimeSeconds: 7200, // 2 —á–∞—Å–∞ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      averageSpeedKmh: 28.4,
      maxSpeedKmh: 60.0,
      status: TrackStatus.active,
      points: _generateTrackPointsFromRoute(route, today, isCompleted: false),
    );
    
    await repo.saveTrack(track);
    print('üìç –°–æ–∑–¥–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ (${track.points.length} —Ç–æ—á–µ–∫) –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ ${route.id}');
  }
  
  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç GPS —Ç—Ä–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
  static List<TrackPoint> _generateTrackPointsFromRoute(
    domain.Route route, 
    DateTime baseDate, 
    {required bool isCompleted}
  ) {
    final points = <TrackPoint>[];
    final routePoints = route.pointsOfInterest;
    
    if (routePoints.isEmpty) {
      return points;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å (–≤—Å–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ, —á–∞—Å—Ç—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ)
    final pointsToProcess = isCompleted ? routePoints.length : (routePoints.length * 0.6).round();
    
    for (int i = 0; i < pointsToProcess; i++) {
      final poi = routePoints[i];
      
      // –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –∫ —Ç–æ—á–∫–µ (—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30-60 –º–∏–Ω—É—Ç)
      final arrivalTime = baseDate.copyWith(
        hour: 9 + (i * 1), // –∫–∞–∂–¥—ã–π —á–∞—Å –Ω–æ–≤–∞—è —Ç–æ—á–∫–∞
        minute: 15 + (i * 5), // –Ω–µ–±–æ–ª—å—à–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
      );
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–æ—á–∫—É POI
      points.add(TrackPoint(
        latitude: poi.coordinates.latitude,
        longitude: poi.coordinates.longitude,
        altitude: 50.0 + (i * 3), // –∏–º–∏—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã
        accuracy: 2.0 + (i % 3), // —Ç–æ—á–Ω–æ—Å—Ç—å GPS 2-5 –º–µ—Ç—Ä–æ–≤
        speedKmh: i == 0 ? 0.0 : 30.0 + (i * 2), // —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
        bearing: i * 45.0, // –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        timestamp: arrivalTime,
      ));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –º–µ–∂–¥—É POI –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
      if (i < pointsToProcess - 1) {
        final nextPoi = routePoints[i + 1];
        final intermediatePoints = _generateIntermediatePoints(
          poi.coordinates, 
          nextPoi.coordinates, 
          arrivalTime.add(const Duration(minutes: 10)), // –æ—Ç—ä–µ–∑–¥ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
          3, // 3 –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏
        );
        points.addAll(intermediatePoints);
      }
    }
    
    return points;
  }
  
  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –º–µ–∂–¥—É –¥–≤—É–º—è POI
  static List<TrackPoint> _generateIntermediatePoints(
    LatLng start,
    LatLng end,
    DateTime departureTime,
    int numberOfPoints,
  ) {
    final points = <TrackPoint>[];
    
    for (int i = 1; i <= numberOfPoints; i++) {
      final progress = i / (numberOfPoints + 1);
      
      // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ–∂–¥—É –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–æ–π
      final lat = start.latitude + (end.latitude - start.latitude) * progress;
      final lng = start.longitude + (end.longitude - start.longitude) * progress;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
      final latOffset = (math.Random().nextDouble() - 0.5) * 0.0005; // ~50 –º–µ—Ç—Ä–æ–≤
      final lngOffset = (math.Random().nextDouble() - 0.5) * 0.0005;
      
      points.add(TrackPoint(
        latitude: lat + latOffset,
        longitude: lng + lngOffset,
        altitude: 45.0 + (i * 2),
        accuracy: 3.0,
        speedKmh: 25.0 + (i * 5), // –≤–∞—Ä—å–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
        bearing: _calculateBearing(start, end),
        timestamp: departureTime.add(Duration(minutes: i * 5)), // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      ));
    }
    
    return points;
  }
  
  /// –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (bearing) –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
  static double _calculateBearing(LatLng start, LatLng end) {
    final lat1 = start.latitude * math.pi / 180;
    final lat2 = end.latitude * math.pi / 180;
    final deltaLng = (end.longitude - start.longitude) * math.pi / 180;
    
    final y = math.sin(deltaLng) * math.cos(lat2);
    final x = math.cos(lat1) * math.sin(lat2) - math.sin(lat1) * math.cos(lat2) * math.cos(deltaLng);
    
    final bearing = math.atan2(y, x) * 180 / math.pi;
    return (bearing + 360) % 360; // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 0-360
  }
}
