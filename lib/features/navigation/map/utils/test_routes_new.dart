import 'package:latlong2/latlong.dart';
import 'route_point.dart';

/// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
class TestRoutes {
  // –¶–µ–Ω—Ç—Ä –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞ (–ø–ª–æ—â–∞–¥—å –ë–æ—Ä—Ü–æ–≤ —Ä–µ–≤–æ–ª—é—Ü–∏–∏)
  static const LatLng vladivostokCenter = LatLng(43.1198, 131.8869);
  
  // –î–í–§–£ (–æ—Å—Ç—Ä–æ–≤ –†—É—Å—Å–∫–∏–π)
  static const LatLng dvfu = LatLng(43.0231, 131.8921);
  
  // –¢–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã –∏ –æ—Ñ–∏—Å—ã
  static const LatLng oceanPlaza = LatLng(43.1150, 131.8820);
  static const LatLng cloverHouse = LatLng(43.1180, 131.8780);
  static const LatLng fanPlaza = LatLng(43.1320, 131.9100);
  static const LatLng kalina = LatLng(43.1280, 131.8950);

  /// –°–æ–∑–¥–∞–µ—Ç —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è
  /// –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 9:00, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ 18:00
  static WorkDayRoute createSalesRepWorkDay() {
    final DateTime startOfDay = DateTime.now().copyWith(hour: 9, minute: 0, second: 0, millisecond: 0);
    
    final List<RoutePoint> points = [
      // 9:00 - –ù–∞—á–∞–ª–æ –¥–Ω—è (–¥–æ–º/–æ—Ñ–∏—Å)
      RoutePoint(
        location: vladivostokCenter,
        timestamp: startOfDay,
        description: 'üè¢ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è',
        type: RoutePointType.start,
      ),
      
      // 9:30 - –ï–¥–µ–º –∫ –ø–µ—Ä–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
      RoutePoint(
        location: const LatLng(43.1170, 131.8830),
        timestamp: startOfDay.add(const Duration(minutes: 30)),
        description: 'üöó –í –ø—É—Ç–∏ –∫ Ocean Plaza',
      ),
      
      // 10:00 - –ü–µ—Ä–≤—ã–π –∫–ª–∏–µ–Ω—Ç (Ocean Plaza)
      RoutePoint(
        location: oceanPlaza,
        timestamp: startOfDay.add(const Duration(hours: 1)),
        description: 'üõçÔ∏è –ö–ª–∏–µ–Ω—Ç: Ocean Plaza\nüíº –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –Ω–æ–≤–∏–Ω–æ–∫',
        type: RoutePointType.checkpoint,
      ),
      
      // 11:00 - –í—ã–µ–∑–∂–∞–µ–º –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
      RoutePoint(
        location: const LatLng(43.1160, 131.8810),
        timestamp: startOfDay.add(const Duration(hours: 2)),
        description: '‚úÖ –í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –µ–¥–µ–º –¥–∞–ª—å—à–µ',
      ),
      
      // 11:45 - –í—Ç–æ—Ä–æ–π –∫–ª–∏–µ–Ω—Ç (Clover House)
      RoutePoint(
        location: cloverHouse,
        timestamp: startOfDay.add(const Duration(hours: 2, minutes: 45)),
        description: 'üè¢ –ö–ª–∏–µ–Ω—Ç: Clover House\nüìã –û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏',
        type: RoutePointType.checkpoint,
      ),
      
      // 12:30 - –û–±–µ–¥
      RoutePoint(
        location: const LatLng(43.1190, 131.8790),
        timestamp: startOfDay.add(const Duration(hours: 3, minutes: 30)),
        description: 'üçΩÔ∏è –û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤',
        type: RoutePointType.stop,
      ),
      
      // 13:30 - –ü–æ—Å–ª–µ –æ–±–µ–¥–∞, –µ–¥–µ–º –∫ —Ç—Ä–µ—Ç—å–µ–º—É –∫–ª–∏–µ–Ω—Ç—É
      RoutePoint(
        location: const LatLng(43.1250, 131.8900),
        timestamp: startOfDay.add(const Duration(hours: 4, minutes: 30)),
        description: 'üöó –ü–æ–µ–∑–¥–∫–∞ –∫ Fan Plaza',
      ),
      
      // 14:00 - –¢—Ä–µ—Ç–∏–π –∫–ª–∏–µ–Ω—Ç (Fan Plaza)
      RoutePoint(
        location: fanPlaza,
        timestamp: startOfDay.add(const Duration(hours: 5)),
        description: 'üõí –ö–ª–∏–µ–Ω—Ç: Fan Plaza\nüí∞ –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –æ —Å–∫–∏–¥–∫–∞—Ö',
        type: RoutePointType.checkpoint,
      ),
      
      // 15:30 - –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –∫–ª–∏–µ–Ω—Ç (Kalina Mall)
      RoutePoint(
        location: kalina,
        timestamp: startOfDay.add(const Duration(hours: 6, minutes: 30)),
        description: 'üè¨ –ö–ª–∏–µ–Ω—Ç: Kalina Mall\nüì¶ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤',
        type: RoutePointType.checkpoint,
      ),
      
      // 16:30 - –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Ñ–∏—Å
      RoutePoint(
        location: const LatLng(43.1220, 131.8880),
        timestamp: startOfDay.add(const Duration(hours: 7, minutes: 30)),
        description: 'üöó –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –æ—Ñ–∏—Å',
      ),
      
      // 17:00 - –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
      RoutePoint(
        location: vladivostokCenter,
        timestamp: startOfDay.add(const Duration(hours: 8)),
        description: 'üèÅ –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è\nüìä –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤',
        type: RoutePointType.end,
      ),
    ];
    
    return WorkDayRoute(
      points: points,
      startTime: startOfDay,
      endTime: startOfDay.add(const Duration(hours: 8)),
      description: '–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è',
    );
  }

  /// –°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç (30 –º–∏–Ω—É—Ç)
  static WorkDayRoute createShortTestRoute() {
    final DateTime start = DateTime.now();
    
    final List<RoutePoint> points = [
      RoutePoint(
        location: vladivostokCenter,
        timestamp: start,
        description: 'üéØ –¢–µ—Å—Ç: –ù–∞—á–∞–ª–æ',
        type: RoutePointType.start,
      ),
      
      RoutePoint(
        location: const LatLng(43.1180, 131.8850),
        timestamp: start.add(const Duration(minutes: 5)),
        description: 'üö∂ –î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏',
      ),
      
      RoutePoint(
        location: oceanPlaza,
        timestamp: start.add(const Duration(minutes: 15)),
        description: 'üéØ –¢–µ—Å—Ç: –ß–µ–∫-–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç',
        type: RoutePointType.checkpoint,
      ),
      
      RoutePoint(
        location: vladivostokCenter,
        timestamp: start.add(const Duration(minutes: 30)),
        description: 'üèÅ –¢–µ—Å—Ç: –ó–∞–≤–µ—Ä—à–µ–Ω',
        type: RoutePointType.end,
      ),
    ];
    
    return WorkDayRoute(
      points: points,
      startTime: start,
      endTime: start.add(const Duration(minutes: 30)),
      description: '–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç',
    );
  }

  /// –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
  @Deprecated('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ createSalesRepWorkDay() –∏–ª–∏ createShortTestRoute()')
  static List<LatLng> centerCircle() {
    return createShortTestRoute().coordinates;
  }

  @Deprecated('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ createSalesRepWorkDay() –∏–ª–∏ createShortTestRoute()')
  static List<LatLng> toDVFU() {
    final start = DateTime.now();
    final points = [
      RoutePoint(location: vladivostokCenter, timestamp: start),
      RoutePoint(location: const LatLng(43.1100, 131.8900), timestamp: start.add(const Duration(minutes: 10))),
      RoutePoint(location: const LatLng(43.0800, 131.8920), timestamp: start.add(const Duration(minutes: 20))),
      RoutePoint(location: dvfu, timestamp: start.add(const Duration(minutes: 45))),
    ];
    return points.map((p) => p.location).toList();
  }

  @Deprecated('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ createSalesRepWorkDay() –∏–ª–∏ createShortTestRoute()')
  static List<LatLng> vladivostokCenterRoute() {
    return createSalesRepWorkDay().coordinates;
  }

  @Deprecated('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ createSalesRepWorkDay() –∏–ª–∏ createShortTestRoute()')
  static List<LatLng> getCircularRoute() {
    return createShortTestRoute().coordinates;
  }
}
