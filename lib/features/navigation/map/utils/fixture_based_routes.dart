import 'package:flutter/material.dart' hide Route;
import 'package:latlong2/latlong.dart';
import 'package:get_it/get_it.dart';
import 'package:tauzero/features/shop/employee/domain/employee.dart';
import 'package:tauzero/features/shop/route/domain/repositories/route_repository.dart';
import 'package:tauzero/features/shop/route/domain/entities/route.dart';
import 'package:tauzero/features/shop/route/domain/entities/point_of_interest.dart';
import 'route_point.dart';

/// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–∫—Å—Ç—É—Ä
/// 
/// –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
/// –¥–∞–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–æ–π —Ñ–∏–∫—Å—Ç—É—Ä
class FixtureBasedRoutes {
  static final RouteRepository _routeRepository = GetIt.instance<RouteRepository>();

  /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
  static Future<List<MapDisplayRoute>> getAllRoutesForMap() async {
    final routes = <MapDisplayRoute>[];
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      final allRoutes = await _routeRepository.getAllRoutes();
      
      for (final route in allRoutes) {
        final mapRoute = await convertRouteToMapDisplayRoute(route);
        routes.add(mapRoute);
      }
      
      return routes;
      
    } catch (e) {
      return _getFallbackRoutes(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è
  static Future<List<MapDisplayRoute>> getRoutesForSalesRep(Employee salesRep) async {
    try {
      final userRoutes = await _routeRepository.watchEmployeeRoutes(salesRep).first;
      
      final mapRoutes = <MapDisplayRoute>[];
      for (final route in userRoutes) {
        final mapRoute = await convertRouteToMapDisplayRoute(route);
        mapRoutes.add(mapRoute);
      }
      
      return mapRoutes;
    } catch (e) {
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π (—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π) –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  static Future<MapDisplayRoute?> getTodaysActiveRoute() async {
    try {
      final allRoutes = await _routeRepository.getAllRoutes();
      
      // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      final today = DateTime.now();
      final activeRoute = allRoutes.where((route) {
        return route.status == RouteStatus.active &&
               route.startTime != null &&
               _isSameDay(route.startTime!, today);
      }).firstOrNull;
      
      if (activeRoute != null) {
        return await convertRouteToMapDisplayRoute(activeRoute);
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ, –±–µ—Ä–µ–º –ª—é–±–æ–π —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π
      final todayRoute = allRoutes.where((route) {
        return route.startTime != null &&
               _isSameDay(route.startTime!, today);
      }).firstOrNull;
      
      if (todayRoute != null) {
        return await convertRouteToMapDisplayRoute(todayRoute);
      }
      
      return null;
    } catch (e) {
      return null;
    }
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Route –≤ MapDisplayRoute –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
  static Future<MapDisplayRoute> convertRouteToMapDisplayRoute(Route route) async {
    final points = <RoutePoint>[];
    
    for (int i = 0; i < route.pointsOfInterest.length; i++) {
      final poi = route.pointsOfInterest[i];
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —Ç–æ—á–∫–∏
      DateTime? timestamp;
      if (poi.actualArrivalTime != null) {
        timestamp = poi.actualArrivalTime;
      } else if (poi.plannedArrivalTime != null) {
        timestamp = poi.plannedArrivalTime;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ—á–∫–∏
      RoutePointType pointType;
      if (i == 0) {
        pointType = RoutePointType.start;
      } else if (i == route.pointsOfInterest.length - 1) {
        pointType = RoutePointType.end;
      } else {
        switch (poi.type) {
          case PointType.warehouse:
            pointType = RoutePointType.warehouse;
            break;
          case PointType.break_:
            pointType = RoutePointType.stop;
            break;
          default:
            pointType = RoutePointType.checkpoint;
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
      String description = poi.displayName;
      if (poi.notes?.isNotEmpty == true) {
        description += '\n${poi.notes!}';
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      description += '\nüìä –°—Ç–∞—Ç—É—Å: ${_getStatusEmoji(poi.status)} ${_getStatusName(poi.status)}';
      
      points.add(RoutePoint(
        location: poi.coordinates,
        timestamp: timestamp ?? DateTime.now(),
        description: description,
        type: pointType,
        status: poi.status,
      ));
    }
    
    return MapDisplayRoute(
      id: route.id?.toString() ?? 'unknown',
      name: route.name,
      description: route.description ?? '',
      points: points,
      status: route.status,
      startTime: route.startTime,
      endTime: route.endTime,
      color: _getRouteColor(route.status),
    );
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
  static List<MapDisplayRoute> _getFallbackRoutes() {
    final now = DateTime.now();
    final startTime = DateTime(now.year, now.month, now.day, 9, 0);
    
    return [
      MapDisplayRoute(
        id: 'fallback_1',
        name: '–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç - –¶–µ–Ω—Ç—Ä',
        description: '–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏',
        points: [
          RoutePoint(
            location: const LatLng(43.1198, 131.8869), // –¶–µ–Ω—Ç—Ä –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞
            timestamp: startTime,
            description: 'üè¢ –û—Ñ–∏—Å (—Ä–µ–∑–µ—Ä–≤)',
            type: RoutePointType.start,
          ),
          RoutePoint(
            location: const LatLng(43.1150, 131.8820), // Ocean Plaza
            timestamp: startTime.add(const Duration(hours: 1)),
            description: 'üõçÔ∏è Ocean Plaza (—Ä–µ–∑–µ—Ä–≤)',
            type: RoutePointType.checkpoint,
          ),
          RoutePoint(
            location: const LatLng(43.1320, 131.9100), // Fan Plaza
            timestamp: startTime.add(const Duration(hours: 3)),
            description: 'üõí Fan Plaza (—Ä–µ–∑–µ—Ä–≤)',
            type: RoutePointType.end,
          ),
        ],
        status: RouteStatus.active,
        startTime: startTime,
        color: Colors.blue,
      ),
    ];
  }

  /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
  static Color _getRouteColor(RouteStatus status) {
    switch (status) {
      case RouteStatus.active:
        return Colors.green;
      case RouteStatus.completed:
        return Colors.grey;
      case RouteStatus.planned:
        return Colors.blue;
      case RouteStatus.cancelled:
        return Colors.red;
      case RouteStatus.paused:
        return Colors.orange;
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—á–∫–∏
  static String _getStatusEmoji(VisitStatus status) {
    switch (status) {
      case VisitStatus.planned:
        return 'üìÖ';
      case VisitStatus.enRoute:
        return 'üöó';
      case VisitStatus.arrived:
        return 'üìç';
      case VisitStatus.completed:
        return '‚úÖ';
      case VisitStatus.skipped:
        return '‚è≠Ô∏è';
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—á–∫–∏
  static String _getStatusName(VisitStatus status) {
    switch (status) {
      case VisitStatus.planned:
        return '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ';
      case VisitStatus.enRoute:
        return '–í –ø—É—Ç–∏';
      case VisitStatus.arrived:
        return '–ü—Ä–∏–±—ã–ª';
      case VisitStatus.completed:
        return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
      case VisitStatus.skipped:
        return '–ü—Ä–æ–ø—É—â–µ–Ω–æ';
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–∞—Ç—ã –≤ –æ–¥–∏–Ω –¥–µ–Ω—å
  static bool _isSameDay(DateTime date1, DateTime date2) {
    return date1.year == date2.year &&
           date1.month == date2.month &&
           date1.day == date2.day;
  }
}

/// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
class MapDisplayRoute {
  final String id;
  final String name;
  final String description;
  final List<RoutePoint> points;
  final RouteStatus status;
  final DateTime? startTime;
  final DateTime? endTime;
  final Color color;

  MapDisplayRoute({
    required this.id,
    required this.name,
    required this.description,
    required this.points,
    required this.status,
    this.startTime,
    this.endTime,
    required this.color,
  });

  /// –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞
  Duration get totalDuration {
    if (points.isEmpty) return Duration.zero;
    
    final start = points.first.timestamp;
    final end = points.last.timestamp;
    return end.difference(start);
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
  double get completionPercentage {
    if (points.isEmpty) return 0.0;
    
    final completedPoints = points.where((p) => 
        p.status == VisitStatus.completed || p.status == VisitStatus.skipped).length;
    
    return completedPoints / points.length;
  }
}
