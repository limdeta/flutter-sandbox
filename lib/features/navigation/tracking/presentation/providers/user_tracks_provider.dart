import 'package:flutter/foundation.dart';
import 'package:tauzero/features/navigation/tracking/domain/entities/navigation_user.dart';
import 'dart:async';
import '../../domain/entities/user_track.dart';
import '../usecases/get_user_tracks_usecase.dart';

/// Provider –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
class UserTracksProvider extends ChangeNotifier {
  final GetUserTracksUseCase _getUserTracksUseCase;
  
  List<UserTrack> _userTracks = [];
  UserTrack? _activeTrack;
  List<UserTrack> _completedTracks = [];
  bool _isLoading = false;
  String? _error;
  
  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  NavigationUser? _lastLoadedUser;
  DateTime? _lastLoadTime;
  static const Duration _cacheTimeout = Duration(minutes: 5);
  
  // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π UI
  Timer? _debounceTimer;
  static const Duration _debounceDelay = Duration(milliseconds: 300);
  
  UserTracksProvider(this._getUserTracksUseCase);
  
  // Getters
  List<UserTrack> get userTracks => _userTracks;
  UserTrack? get activeTrack => _activeTrack;
  List<UserTrack> get completedTracks => _completedTracks;
  bool get isLoading => _isLoading;
  String? get error => _error;
  
  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º)
  Future<void> loadUserTracks(NavigationUser user) async {
    if (_lastLoadedUser?.id == user.id && 
        _lastLoadTime != null && 
        DateTime.now().difference(_lastLoadTime!) < _cacheTimeout) {
      return;
    }
    
    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–±–∞—É–Ω—Å —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    _debounceTimer?.cancel();
    
    _debounceTimer = Timer(_debounceDelay, () async {
      _isLoading = true;
      _error = null;
      notifyListeners();
      
      final result = await _getUserTracksUseCase.call(user);
      
      result.fold(
        (failure) {
          _error = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤: $failure';
          _isLoading = false;
          print('‚ùå UserTracksProvider: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤: $failure');
          notifyListeners();
        },
        (tracks) {
          _userTracks = tracks;
          _activeTrack = tracks.where((track) => track.status.isActive).firstOrNull;
          _completedTracks = tracks.where((track) => track.status.name == 'completed').toList();
          _isLoading = false;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
          _lastLoadedUser = user;
          _lastLoadTime = DateTime.now();
          
                // –£–±–∏—Ä–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è dev —Ä–µ–∂–∏–º–∞
      // print('‚úÖ UserTracksProvider: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${loaded.length} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è ${user.fullName}');
          notifyListeners();
        },
      );
    });
  }
  
  /// –û—á–∏—â–∞–µ—Ç —Ç—Ä–µ–∫–∏ (–ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  void clearTracks() {
    _debounceTimer?.cancel(); // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    _userTracks.clear();
    _activeTrack = null;
    _completedTracks.clear();
    _error = null;
    _lastLoadedUser = null;
    _lastLoadTime = null;
    print('üßπ UserTracksProvider: –¢—Ä–µ–∫–∏ –∏ –∫—ç—à –æ—á–∏—â–µ–Ω—ã');
    notifyListeners();
  }

  @override
  void dispose() {
    _debounceTimer?.cancel(); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    super.dispose();
  }
}
