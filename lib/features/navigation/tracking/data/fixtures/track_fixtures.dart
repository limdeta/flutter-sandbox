import 'dart:convert';
import 'package:flutter/services.dart' show rootBundle;
import 'package:get_it/get_it.dart';
import 'package:tauzero/features/navigation/tracking/domain/entities/navigation_user.dart';
import '../../../../shop/route/domain/entities/route.dart';
import '../../domain/entities/user_track.dart';
import '../../domain/entities/compact_track_builder.dart';
import '../../domain/enums/track_status.dart';
import '../../domain/repositories/user_track_repository.dart';

/// –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö GPS —Ç—Ä–µ–∫–æ–≤ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
/// 
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ GPS –¥–∞–Ω–Ω—ã–µ –∏–∑ current_day_track.json (OSRM –º–∞—Ä—à—Ä—É—Ç)
/// –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–æ–º
class TrackFixtures {
  static final UserTrackRepository _repository = GetIt.instance<UserTrackRepository>();
  
  // –ö—ç—à –¥–ª—è GPS –¥–∞–Ω–Ω—ã—Ö
  static Map<String, dynamic>? _cachedOsrmData;
  static String? _cachedDataKey;

  /// –°–æ–∑–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ OSRM –º–∞—Ä—à—Ä—É—Ç–∞ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
  /// –°–≤—è–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–∫ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–æ–º –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  static Future<UserTrack?> createCurrentDayTrack({
    required NavigationUser user,
    required Route route,
  }) async {
    try {
      // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ GPS –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      const dataKey = 'current_day_track';
      Map<String, dynamic> osrmResponse;
      
      if (_cachedOsrmData != null && _cachedDataKey == dataKey) {
        osrmResponse = _cachedOsrmData!;
      } else {
        final jsonString = await rootBundle.loadString('assets/data/tracks/current_day_track.json');
        osrmResponse = jsonDecode(jsonString) as Map<String, dynamic>;
        
        _cachedOsrmData = osrmResponse;
        _cachedDataKey = dataKey;
      }

      final now = DateTime.now();
      final startTime = DateTime(now.year, now.month, now.day, 9, 0);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      final compactTrack = CompactTrackFactory.fromOSRMResponse(
        osrmResponse,
        startTime: startTime,
        baseSpeed: 45.0, // –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
        baseAccuracy: 4.0, // GPS —Ç–æ—á–Ω–æ—Å—Ç—å
      );

      if (compactTrack.isEmpty) {
        print('‚ùå TrackFixtures: CompactTrack –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è');
        return null;
      }

      final userTrack = UserTrack.fromSingleTrack(
        id: 0,
        user: user,
        track: compactTrack,
        status: TrackStatus.active,
        metadata: {
          'type': 'current_day_real_gps',
          'created_at': startTime.toIso8601String(),
          'route_id': route.id?.toString() ?? 'unknown',
          'route_name': route.name,
          'data_source': 'osrm_real_route',
          'total_coordinates': compactTrack.pointCount.toString(),
          'distance_km': (compactTrack.getTotalDistance() / 1000).toStringAsFixed(2),
          'duration_minutes': compactTrack.getDuration().inMinutes.toString(),
          'current_status': 'active_tracking',
          'route_points_total': route.pointsOfInterest.length.toString(),
          'route_points_completed': route.pointsOfInterest.where((p) => p.status.name == 'completed').length.toString(),
          'estimated_completion': DateTime(now.year, now.month, now.day, 17, 30).toIso8601String(),
        },
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      print('üöÄ TrackFixtures: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} (${user.fullName})');
      print('üöÄ TrackFixtures: –¢—Ä–µ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç ${compactTrack.pointCount} —Ç–æ—á–µ–∫');
      
      final result = await _repository.saveUserTrack(userTrack);
      
      return result.fold(
        (failure) {
          print('‚ùå TrackFixtures: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: ${failure.message}');
          return null;
        },
        (savedTrack) {
          print('‚úÖ TrackFixtures: –¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: ${savedTrack.id}');
          return savedTrack;
        },
      );

    } catch (e) {
      print('‚ùå TrackFixtures: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞: $e');
      return null;
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  /// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<UserTrack?> createTestTracksForUser({
    required NavigationUser user,
    required List<Route> routes,
  }) async {
    if (routes.isEmpty) return null;

    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç (—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π)
    final todayRoute = routes.firstWhere(
      (route) => route.status.name == 'active',
      orElse: () => routes.first,
    );

    // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ GPS –¥–∞–Ω–Ω—ã–º–∏
    return await createCurrentDayTrack(
      user: user,
      route: todayRoute,
    );
  }
}