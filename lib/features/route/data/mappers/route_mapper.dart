import 'dart:convert';
import 'package:latlong2/latlong.dart';
import 'package:drift/drift.dart';
import 'package:get_it/get_it.dart';
import 'package:tauzero/features/authentication/domain/entities/user.dart';

import '../../domain/entities/route.dart';
import '../../domain/entities/ipoint_of_interest.dart';
import '../../domain/entities/trading_point_of_interest.dart';
import '../../domain/entities/regular_point_of_interest.dart';
import '../../domain/entities/trading_point.dart';
import '../../../../shared/infrastructure/database/app_database.dart';

/// Mapper –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É Domain –∏ Database –º–æ–¥–µ–ª—è–º–∏
/// 
/// –≠—Ç–æ critical –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Clean Architecture:
/// Domain –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–Ω–∞–µ—Ç –æ Database, —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ mappers
class RouteMapper {
  
  // =====================================================
  // ROUTE MAPPINGS - –ú–∞—Ä—à—Ä—É—Ç—ã
  // =====================================================
  
  /// Domain Route ‚Üí Database RoutesTableCompanion
  static Future<RoutesTableCompanion> toDatabase(Route route, User user) async {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –±–∞–∑—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ ID
    final database = GetIt.instance<AppDatabase>();
    final allUsers = await database.getAllUsers();
    final dbUser = allUsers.where((u) => u.externalId == user.externalId).firstOrNull;
    
    final userIdInt = dbUser != null ? allUsers.indexOf(dbUser) + 1 : 0;
    print('üîó –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName} —Å ID: $userIdInt');
    
    return RoutesTableCompanion(
      // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º id - –ø—É—Å—Ç—å –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∞–º–∞ —Å–æ–∑–¥–∞—Å—Ç autoincrement
      // –¢–æ–ª—å–∫–æ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ route —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º id
      id: route.id != null ? Value(route.id!) : const Value.absent(),
      name: Value(route.name),
      description: Value(route.description),
      createdAt: Value(route.createdAt),
      startTime: Value(route.startTime),
      endTime: Value(route.endTime),
      status: Value(route.status.name), // Enum ‚Üí String
      pathJson: Value(_encodePathToJson(route.path)),
      userId: Value(userIdInt),
    );
  }
  
  /// Database RoutesTableData ‚Üí Domain Route  
  static Route fromDatabase(
    RoutesTableData routeData,
    List<IPointOfInterest> points,
  ) {
    return Route(
      id: routeData.id,
      name: routeData.name,
      description: routeData.description,
      createdAt: routeData.createdAt,
      startTime: routeData.startTime,
      endTime: routeData.endTime,
      pointsOfInterest: points,
      path: _decodePathFromJson(routeData.pathJson),
      status: RouteStatus.values.byName(routeData.status),
    );
  }

  // =====================================================
  // POINT OF INTEREST MAPPINGS - –¢–æ—á–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞
  // =====================================================
  
  /// Domain IPointOfInterest ‚Üí Database PointsOfInterestTableCompanion
  static PointsOfInterestTableCompanion pointToDatabase(
  IPointOfInterest point,
  int routeId,
  int orderIndex, {
    int? tradingPointDatabaseId, // –†–µ–∞–ª—å–Ω—ã–π ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã trading_points
  }) {
    return PointsOfInterestTableCompanion(
      // id: Value(point.id), // –î–ª—è insert –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º!
      routeId: Value(routeId),
      name: Value(point.displayName),
      description: Value(point.notes ?? ''),
      latitude: Value(point.coordinates.latitude),
      longitude: Value(point.coordinates.longitude),
      plannedArrivalTime: Value(point.plannedArrivalTime),
      plannedDepartureTime: Value(point.plannedDepartureTime),
      actualArrivalTime: Value(point.actualArrivalTime),
      actualDepartureTime: Value(point.actualDepartureTime),
      type: Value(point.type.name),
      status: Value(point.status.name),
      notes: Value(point.notes),
      tradingPointId: Value(tradingPointDatabaseId), // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π DB ID
      orderIndex: Value(point.order ?? orderIndex),
      createdAt: Value(point.createdAt),
      updatedAt: Value(point.updatedAt),
    );
  }
  
  /// Database PointsOfInterestTableData ‚Üí Domain IPointOfInterest
  static IPointOfInterest pointFromDatabase(
    PointsOfInterestTableData pointData,
    TradingPointsTableData? tradingPointData,
  ) {
    final coordinates = LatLng(pointData.latitude, pointData.longitude);
    final type = PointType.values.byName(pointData.type);
    final status = VisitStatus.values.byName(pointData.status);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞, —Å–æ–∑–¥–∞–µ–º TradingPointOfInterest
    if (tradingPointData != null) {
      final tradingPoint = TradingPoint(
        externalId: tradingPointData.externalId,
        name: tradingPointData.name,
        inn: tradingPointData.inn,
      );
      return TradingPointOfInterest(
        id: pointData.id,
        name: pointData.name,
        tradingPoint: tradingPoint,
        coordinates: coordinates,
        plannedArrivalTime: pointData.plannedArrivalTime,
        plannedDepartureTime: pointData.plannedDepartureTime,
        actualArrivalTime: pointData.actualArrivalTime,
        actualDepartureTime: pointData.actualDepartureTime,
        status: status,
        notes: pointData.notes,
        order: pointData.orderIndex,
      );
    }
    // –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é —Ç–æ—á–∫—É
    return RegularPointOfInterest(
      id: pointData.id,
      name: pointData.name,
      description: pointData.description,
      coordinates: coordinates,
      type: type,
      plannedArrivalTime: pointData.plannedArrivalTime,
      plannedDepartureTime: pointData.plannedDepartureTime,
      actualArrivalTime: pointData.actualArrivalTime,
      actualDepartureTime: pointData.actualDepartureTime,
      status: status,
      notes: pointData.notes,
      order: pointData.orderIndex,
    );
  }

  // =====================================================
  // TRADING POINT MAPPINGS - –¢–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏
  // =====================================================
  
  /// Domain TradingPoint ‚Üí Database TradingPointsTableCompanion
  static TradingPointsTableCompanion tradingPointToDatabase(TradingPoint point) {
    return TradingPointsTableCompanion(
      externalId: Value(point.externalId),
      name: Value(point.name),
      inn: Value(point.inn),
      updatedAt: Value(DateTime.now()),
    );
  }
  
  /// Database TradingPointsTableData ‚Üí Domain TradingPoint
  static TradingPoint tradingPointFromDatabase(TradingPointsTableData data) {
    return TradingPoint(
      externalId: data.externalId,
      name: data.name,
      inn: data.inn,
    );
  }

  // =====================================================
  // PRIVATE HELPERS - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  // =====================================================
  
  /// –ö–æ–¥–∏—Ä—É–µ—Ç –ø—É—Ç—å –≤ JSON –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
  static String? _encodePathToJson(List<LatLng> path) {
    if (path.isEmpty) return null;
    
    final List<Map<String, double>> pathList = path.map((latLng) => {
      'lat': latLng.latitude,
      'lng': latLng.longitude,
    }).toList();
    
    return json.encode(pathList);
  }
  
  /// –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –ø—É—Ç—å –∏–∑ JSON –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î
  static List<LatLng> _decodePathFromJson(String? pathJson) {
    if (pathJson == null || pathJson.isEmpty) return [];
    
    try {
      final List<dynamic> pathList = json.decode(pathJson);
      return pathList.map((point) => LatLng(
        point['lat'] as double,
        point['lng'] as double,
      )).toList();
    } catch (e) {
      // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –ø—É—Ç—å
      return [];
    }
  }
}

/// Extension –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å bulk –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
extension RouteMapperExtensions on RouteMapper {
  
  /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –≤ Companions –¥–ª—è batch –≤—Å—Ç–∞–≤–∫–∏
  static List<PointsOfInterestTableCompanion> pointsToDatabase(
    List<IPointOfInterest> points,
    int routeId, {
    Map<String, int>? tradingPointDatabaseIds, // –ú–∞–ø–ø–∏–Ω–≥ externalId -> databaseId
  }) {
    return points.asMap().entries.map((entry) {
      final index = entry.key;
      final point = entry.value;
      
      int? tradingPointId;
      if (point is TradingPointOfInterest && tradingPointDatabaseIds != null) {
        tradingPointId = tradingPointDatabaseIds[point.tradingPoint.externalId];
      }
      
      return RouteMapper.pointToDatabase(
        point, 
        routeId, 
        index,
        tradingPointDatabaseId: tradingPointId,
      );
    }).toList();
  }
  
  // TODO: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –∫–æ–≥–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º RouteWithPointsResult –≤ AppDatabase
  // /// –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã JOIN –∑–∞–ø—Ä–æ—Å–∞ –≤ —É–¥–æ–±–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  // static Map<int, List<RouteWithPointsResult>> groupRouteResults(
  //   List<RouteWithPointsResult> results,
  // ) {
  //   final Map<int, List<RouteWithPointsResult>> grouped = {};
  //   
  //   for (final result in results) {
  //     final routeId = result.route.id;
  //     if (!grouped.containsKey(routeId)) {
  //       grouped[routeId] = [];
  //     }
  //     grouped[routeId]!.add(result);
  //   }
  //   
  //   return grouped;
  // }
}
