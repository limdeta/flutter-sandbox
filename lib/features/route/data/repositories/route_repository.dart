import 'package:tauzero/features/authentication/domain/entities/user.dart';
import 'package:tauzero/shared/domain/either.dart';
import 'package:tauzero/shared/domain/failures.dart';
import 'package:drift/drift.dart';

import '../../../../shared/infrastructure/database/app_database.dart';
import '../mappers/route_mapper.dart';
import '../../domain/entities/route.dart';
import '../../domain/entities/ipoint_of_interest.dart';
import '../../domain/entities/trading_point_of_interest.dart';
import '../../domain/repositories/iroute_repository.dart';

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ —á–µ—Ä–µ–∑ Drift database
/// 
/// –≠—Ç–æ implementation —Å–ª–æ–π –≤ Clean Architecture:
/// - –ó–Ω–∞–µ—Ç –æ Drift –∏ SQL
/// - –†–µ–∞–ª–∏–∑—É–µ—Ç domain interface
/// - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç mappers –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
class RouteRepository implements IRouteRepository {
  final AppDatabase _database;
  
  RouteRepository(this._database);

  // =====================================================
  // ROUTE OPERATIONS - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
  // =====================================================
  
  @override
  Future<List<Route>> getAllRoutes() async {
    try {
      final allRoutes = await _database.select(_database.routesTable).get();
      final routesList = <Route>[];
      
      for (final routeData in allRoutes) {
        final points = await _loadRoutePoints(routeData.id);
        final route = RouteMapper.fromDatabase(routeData, points);
        routesList.add(route);
      }
      
      return routesList;
    } catch (e) {
      return [];
    }
  }
  
  @override
  Stream<List<Route>> watchUserRoutes(User user) async* {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –Ω–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final allUsers = await _database.getAllUsers();
    final dbUser = allUsers.where((u) => u.externalId == user.externalId).firstOrNull;
    
    if (dbUser == null) {
      print('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.firstName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
      yield [];
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π userId (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ + 1)
    final userIdInt = allUsers.indexOf(dbUser) + 1;
    
    yield* _database.watchUserRoutes(userIdInt).asyncMap((routeDataList) async {
      final List<Route> routes = [];
      
      for (final routeData in routeDataList) {
        final points = await _loadRoutePoints(routeData.id);
        final route = RouteMapper.fromDatabase(routeData, points);
        routes.add(route);
      }
      
      return routes;
    });
  }
  
  @override
  Future<Either<NotFoundFailure, Route>> getRouteById(Route route) async {
    if (route.id == null) {
      return const Left(NotFoundFailure('Route ID is null'));
    }
    
    final routeData = await _database.getRouteById(route.id!);
    if (routeData == null) {
      return const Left(NotFoundFailure('Route not found'));
    }
    
    final points = await _loadRoutePoints(route.id!);
    final foundRoute = RouteMapper.fromDatabase(routeData, points);
    return Right(foundRoute);
  }
  
  @override
  Future<Either<NotFoundFailure, Route>> getRouteByInternalId(int routeId) async {
    final routeData = await _database.getRouteById(routeId);
    if (routeData == null) {
      return const Left(NotFoundFailure('Route not found'));
    }
    
    final points = await _loadRoutePoints(routeId);
    final foundRoute = RouteMapper.fromDatabase(routeData, points);
    return Right(foundRoute);
  }
  
  @override
  Future<Either<EntityCreationFailure, Route>> createRoute(Route route, User? user) async {
    try {
      if (user == null) {
        return const Left(EntityCreationFailure('User is required'));
      }
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
      final routeCompanion = await RouteMapper.toDatabase(route, user);
      final routeId = await _database.createRoute(routeCompanion);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –∏ —Å–æ–∑–¥–∞–µ–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
      final tradingPointIds = await _saveTradingPoints(route.pointsOfInterest);
      final pointCompanions = RouteMapperExtensions.pointsToDatabase(
        route.pointsOfInterest,
        routeId,
        tradingPointDatabaseIds: tradingPointIds,
      );
      
      for (final pointCompanion in pointCompanions) {
        await _database.createPoint(pointCompanion);
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      final tempRoute = route.copyWith(id: routeId);
      final createdRouteResult = await getRouteById(tempRoute);
      return createdRouteResult.fold(
        (failure) => Left(EntityCreationFailure('Failed to load created route: ${failure.message}')),
        (createdRoute) => Right(createdRoute),
      );
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: $e');
      return Left(EntityCreationFailure('Failed to create route: $e'));
    }
  }
  
  @override
  Future<Either<EntityUpdateFailure, Route>> updateRoute(Route route, User? user) async {
    try {
      if (user == null) {
        return const Left(EntityUpdateFailure('User is required'));
      }
      
      if (route.id == null) {
        return const Left(EntityUpdateFailure('Route ID is required for update'));
      }
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ—á–∫–∏ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      // TODO: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å - –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
      await _database.deleteRoute(route.id!);
      final createResult = await createRoute(route, user);
      return createResult.fold(
        (failure) => Left(EntityUpdateFailure('Failed to recreate route: ${failure.message}')),
        (updatedRoute) => Right(updatedRoute),
      );
    } catch (e) {
      return Left(EntityUpdateFailure('Failed to update route: $e'));
    }
  }
  
  @override
  Future<void> deleteRoute(Route route) async {
    if (route.id != null) {
      await _database.deleteRoute(route.id!);
    }
  }

  // =====================================================
  // POINT OPERATIONS - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–æ—á–∫–∞–º–∏
  // =====================================================
  
  @override
  Future<void> updatePointStatus({
    required int pointId,
    required String newStatus,
    required String changedBy,
    String? reason,
  }) async {
    // TODO: –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç–æ—á–∫–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å fromStatus
    // –ü–æ–∫–∞ –ø–µ—Ä–µ–¥–∞–µ–º placeholder –∑–Ω–∞—á–µ–Ω–∏—è
    await _database.updatePointStatus(
      pointId: pointId,
      fromStatus: 'planned', // TODO: –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
      toStatus: newStatus,
      changedBy: changedBy,
      reason: reason,
    );
  }

  // =====================================================
  // PRIVATE HELPERS - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  // =====================================================
  
  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
  Future<List<IPointOfInterest>> _loadRoutePoints(int routeId) async {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ order
    final query = _database.select(_database.pointsOfInterestTable)
        ..where((tbl) => tbl.routeId.equals(routeId));
    query.orderBy([(tbl) => OrderingTerm(expression: tbl.orderIndex)]);
    final pointsData = await query.get();
    
    final List<IPointOfInterest> points = [];
    
    for (final pointData in pointsData) {
      // –î–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
      TradingPointsTableData? tradingPointData;
      if (pointData.tradingPointId != null) {
        tradingPointData = await (_database.select(_database.tradingPointsTable)
            ..where((tbl) => tbl.id.equals(pointData.tradingPointId!))).getSingleOrNull();
      }
      
      final point = RouteMapper.pointFromDatabase(
        pointData,
        tradingPointData,
      );
      points.add(point);
    }
    
    return points;
  }
  
  /// –ü–æ–ª—É—á–∞–µ—Ç ID —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ù–ï —Å–æ–∑–¥–∞–µ—Ç –∏—Ö!)
  Future<Map<String, int>> _saveTradingPoints(List<IPointOfInterest> points) async {
    final Map<String, int> tradingPointIds = {};
    
    for (final point in points) {
      if (point is TradingPointOfInterest) {
        final tradingPointData = await _database.getTradingPoint(point.tradingPoint.externalId);
        if (tradingPointData != null) {
          tradingPointIds[point.tradingPoint.externalId] = tradingPointData.id;
        } else {
          print('‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ ${point.tradingPoint.externalId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î! –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –ø–µ—Ä–µ–¥ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏.');
        }
      }
    }
    
    return tradingPointIds;
  }
  
  @override
  Future<void> clearAllTradingPoints() async {
    print('üßπ –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏...');
    final count = await _database.delete(_database.tradingPointsTable).go();
    print('‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫: $count');
  }
}
