import 'dev_fixture_orchestrator.dart';

/// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–∞–±–æ—á–∏—Ö –¥–∞–Ω–Ω—ã—Ö
/// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤ dev —Ä–µ–∂–∏–º–µ
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ —Ñ–∏–∫—Å—Ç—É—Ä—ã
class DevDataSimulator {
  static bool _isInitialized = false;

  static Future<void> initializeDevData() async {
    if (_isInitialized) return;

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö dev –¥–∞–Ω–Ω—ã—Ö
      final orchestrator = DevFixtureOrchestratorFactory.create();
      final result = await orchestrator.createFullDevDataset();
      
      if (result.success) {
        print('‚úÖ Dev –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏');
        print('üë• –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.users.length}');
        print('ÔøΩ –ú–∞—Ä—à—Ä—É—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è ${result.users.salesReps.length} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π');
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è dev –¥–∞–Ω–Ω—ã—Ö: ${result.message}');
      }

      _isInitialized = true;
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ dev –¥–∞–Ω–Ω—ã—Ö: $e');
    }
  }

  static bool get isInitialized => _isInitialized;
  
  static void reset() {
    _isInitialized = false;
  }
}
