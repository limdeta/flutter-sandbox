import 'package:tauzero/features/authentication/domain/entities/user.dart';
import 'package:tauzero/features/authentication/domain/value_objects/phone_number.dart';
import 'package:tauzero/features/authentication/data/fixtures/user_fixture_service.dart';
import 'package:tauzero/features/route/data/fixtures/route_fixture_service.dart';
import 'package:tauzero/features/route/data/fixtures/trading_points_fixture_service.dart';
import 'package:tauzero/features/tracking/fixtures/track_fixtures.dart';
import 'package:get_it/get_it.dart';
import '../../features/authentication/domain/repositories/iuser_repository.dart';
import '../../features/route/domain/repositories/iroute_repository.dart';
import '../infrastructure/database/app_database.dart';

/// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö dev —Ñ–∏–∫—Å—Ç—É—Ä
/// 
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
/// 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–±–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏)
/// 2. –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π
/// 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
/// 
/// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
class DevFixtureOrchestrator {
  final UserFixtureService _userFixtureService;
  final RouteFixtureService _routeFixtureService;
  final TradingPointsFixtureService _tradingPointsService;
  
  DevFixtureOrchestrator(
    this._userFixtureService,
    this._routeFixtureService,
    this._tradingPointsService,
  );

  /// –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä dev –¥–∞–Ω–Ω—ã—Ö
  Future<DevFixturesResult> createFullDevDataset() async {    
    try {
      await _clearAllData();
      
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ (–≥–ª–æ–±–∞–ª—å–Ω–æ)
      print('üè™ –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏...');
      await _tradingPointsService.createBaseTradingPoints();
      
      final users = await _createUsers();
      await _createRoutesForSalesReps(users);
      await _createTestTracks();

      return DevFixturesResult(
        users: users,
        success: true,
        message: '–í—Å–µ dev —Ñ–∏–∫—Å—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ',
      );
      
    } catch (e) {
      return DevFixturesResult(
        users: DevUsers.empty(),
        success: false,
        message: '–û—à–∏–±–∫–∞: $e',
      );
    }
  }

  Future<DevUsers> createUsersOnly() async {
    return await _createUsers();
  }

  Future<void> createRoutesForExistingUsers(List<User> salesReps) async {
    await _createRoutesForSalesReps(DevUsers(
      admin: _createEmptyUser(),
      manager: _createEmptyUser(),
      salesReps: salesReps,
    ));
  }

  User _createEmptyUser() {
    final phoneResult = PhoneNumber.create('+7-999-999-9999');
    final userResult = User.create(
      externalId: 'empty',
      lastName: 'Empty',
      firstName: 'User',
      role: UserRole.user,
      phoneNumber: phoneResult.fold((l) => throw Exception(l), (r) => r),
      hashedPassword: 'empty',
    );
    return userResult.fold((l) => throw Exception(l), (r) => r);
  }

  Future<void> _clearAllData() async {
    // –í dev —Ä–µ–∂–∏–º–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É dev –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–µ—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
      final database = GetIt.instance<AppDatabase>();
      await database.clearAllData();
      print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞ (dev —Ä–µ–∂–∏–º)');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $e');
      rethrow;
    }
    
    await _userFixtureService.clearAllUsers();
  }

  Future<DevUsers> _createUsers() async {
    final admin = await _userFixtureService.createAdmin();
    final manager = await _userFixtureService.createManager();
    final salesReps = <User>[];
    
    final salesRep1 = await _userFixtureService.createSalesRep(
      name: '–ê–ª–µ–∫—Å–µ–π –¢–æ—Ä–≥–æ–≤—ã–π',
      email: 'salesrep1@tauzero.dev',
      phone: '+7-999-111-2233',
    );
    salesReps.add(salesRep1);
    
    final salesRep2 = await _userFixtureService.createSalesRep(
      name: '–ú–∞—Ä–∏—è –ü—Ä–æ–¥–∞–∂–∫–∏–Ω–∞',
      email: 'salesrep2@tauzero.dev', 
      phone: '+7-999-444-5566',
    );
    salesReps.add(salesRep2);
    
    return DevUsers(
      admin: admin,
      manager: manager,
      salesReps: salesReps,
    );
  }

  /// –°–æ–∑–¥–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π
  Future<void> _createRoutesForSalesReps(DevUsers users) async {
    for (final salesRep in users.salesReps) {
      await _routeFixtureService.createDevFixtures(salesRep);
    }
  }

  Future<void> _createTestTracks() async {
      final userRepository = GetIt.instance<IUserRepository>();
      final routeRepository = GetIt.instance<IRouteRepository>();
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–∞—Ö–æ–¥–∏–º —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π
      final usersResult = await userRepository.getAllUsers();
      if (usersResult.isLeft()) {
        return;
      }
      
      final allUsers = usersResult.fold((l) => <User>[], (r) => r);
      final salesReps = allUsers.where((u) => u.role == UserRole.user).toList();
      
      for (final salesRep in salesReps) {
        final routesStream = routeRepository.watchUserRoutes(salesRep);
        final routes = await routesStream.first;
        
        await TrackFixtures.createTestTracksForUser(
          user: salesRep,
          routes: routes,
        );
      }
  }
}

class DevFixturesResult {
  final DevUsers users;
  final bool success;
  final String message;

  DevFixturesResult({
    required this.users,
    required this.success,
    required this.message,
  });
}

/// –ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class DevUsers {
  final User admin;
  final User manager;
  final List<User> salesReps; // –¢–æ—Ä–≥–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏

  DevUsers({
    required this.admin,
    required this.manager,
    required this.salesReps,
  });

  factory DevUsers.empty() => DevUsers(
    admin: _createEmptyUser(),
    manager: _createEmptyUser(), 
    salesReps: [],
  );

  static User _createEmptyUser() {
    final phoneResult = PhoneNumber.create('+7-999-999-9999');
    final userResult = User.create(
      externalId: 'empty',
      lastName: 'Empty',
      firstName: 'User',
      role: UserRole.user,
      phoneNumber: phoneResult.fold((l) => throw Exception(l), (r) => r),
      hashedPassword: 'empty',
    );
    return userResult.fold((l) => throw Exception(l), (r) => r);
  }

  int get length => 1 + 1 + salesReps.length; // admin + manager + salesReps
}

/// Factory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DevFixtureOrchestrator
class DevFixtureOrchestratorFactory {
  static DevFixtureOrchestrator create() {
    final userFixtureService = UserFixtureServiceFactory.create();
    final routeFixtureService = RouteFixtureServiceFactory.create();
    final tradingPointsService = TradingPointsFixtureServiceFactory.create();
    
    return DevFixtureOrchestrator(
      userFixtureService,
      routeFixtureService,
      tradingPointsService,
    );
  }
}
