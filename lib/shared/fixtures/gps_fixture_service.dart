import 'dart:convert';
import 'dart:math';
import 'package:flutter/services.dart';
import 'package:latlong2/latlong.dart';
import 'package:get_it/get_it.dart';

import 'package:tauzero/features/authentication/domain/entities/user.dart';
import 'package:tauzero/features/route/domain/entities/route.dart';
import 'package:tauzero/features/route/domain/entities/ipoint_of_interest.dart';
import 'package:tauzero/features/route/domain/repositories/iroute_repository.dart';
import 'package:tauzero/features/tracking/domain/entities/user_track.dart';
import 'package:tauzero/features/tracking/domain/entities/track_point.dart';
import 'package:tauzero/features/tracking/domain/repositories/iuser_track_repository.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è GPS —Ñ–∏–∫—Å—Ç—É—Ä –∫ –º–∞—Ä—à—Ä—É—Ç–∞–º
/// 
/// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ GPS —Ç—Ä–µ–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞
/// –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Ö –∫ –º–∞—Ä—à—Ä—É—Ç—É –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
class GpsFixtureService {
  final IRouteRepository _routeRepository;
  final IUserTrackRepository _trackRepository;
  
  GpsFixtureService(this._routeRepository, this._trackRepository);
  
  /// üéØ –ü—Ä–∏–º–µ–Ω—è–µ—Ç GPS —Ñ–∏–∫—Å—Ç—É—Ä—ã –∫ —Ç–µ–∫—É—â–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  /// 
  /// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥:
  /// 1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç GPS —Ç—Ä–µ–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞
  /// 2. –°–æ–∑–¥–∞–µ—Ç UserTrack –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
  /// 3. –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–≤—ã—Ö N —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ "completed"
  /// 4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  Future<void> applyGpsFixturesToRoute({
    required Route route,
    required User user,
  }) async {
    print('üéØ –ü—Ä–∏–º–µ–Ω—è–µ–º GPS —Ñ–∏–∫—Å—Ç—É—Ä—ã –∫ –º–∞—Ä—à—Ä—É—Ç—É: ${route.name}');
    
    try {
      // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º GPS —Ñ–∏–∫—Å—Ç—É—Ä—ã –∏–∑ JSON
      final fixtures = await _loadGpsFixtures();
      final completedSegments = fixtures['completed_segments'] as List;
      
      print('üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${completedSegments.length} GPS —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä');
      
      // 2. –°–æ–∑–¥–∞–µ–º UserTrack –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
      final userTracks = <UserTrack>[];
      
      for (int i = 0; i < completedSegments.length; i++) {
        final segment = completedSegments[i] as Map<String, dynamic>;
        final trackPoints = _createTrackPointsFromSegment(segment);
        
        if (trackPoints.isNotEmpty) {
          final userTrack = UserTrack(
            id: 0, // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            user: user,
            route: route,
            startTime: trackPoints.first.timestamp,
            endTime: trackPoints.last.timestamp,
            points: trackPoints,
            totalDistanceMeters: (segment['estimated_distance_meters'] as num).toDouble(),
            movingTimeSeconds: (segment['estimated_duration_minutes'] as num).toInt() * 60,
            totalTimeSeconds: (segment['estimated_duration_minutes'] as num).toInt() * 60,
            averageSpeedKmh: _calculateAverageSpeed(trackPoints),
            maxSpeedKmh: _calculateMaxSpeed(trackPoints),
            status: TrackStatus.completed,
          );
          
          userTracks.add(userTrack);
          print('‚úÖ –°–æ–∑–¥–∞–Ω UserTrack –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ ${i + 1}: ${trackPoints.length} —Ç–æ—á–µ–∫');
        }
      }
      
      // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º UserTrack –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      for (final track in userTracks) {
        await _trackRepository.saveTrack(track);
      }
      
      // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ "completed"
      await _markRoutePointsAsCompleted(route, completedSegments.length);
      
      print('üéâ GPS —Ñ–∏–∫—Å—Ç—É—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã: ${userTracks.length} —Ç—Ä–µ–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–æ');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è GPS —Ñ–∏–∫—Å—Ç—É—Ä: $e');
      rethrow;
    }
  }
  
  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç GPS —Ñ–∏–∫—Å—Ç—É—Ä—ã –∏–∑ JSON —Ñ–∞–π–ª–∞
  Future<Map<String, dynamic>> _loadGpsFixtures() async {
    final jsonString = await rootBundle.loadString(
      'lib/features/route/data/fixtures/gps_track_fixtures.json'
    );
    return jsonDecode(jsonString) as Map<String, dynamic>;
  }
  
  /// –°–æ–∑–¥–∞–µ—Ç TrackPoint'—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞ –≤ JSON
  List<TrackPoint> _createTrackPointsFromSegment(Map<String, dynamic> segment) {
    final trackPointsData = segment['track_points'] as List;
    
    return trackPointsData.map<TrackPoint>((pointData) {
      final point = pointData as Map<String, dynamic>;
      
      return TrackPoint(
        latitude: (point['latitude'] as num).toDouble(),
        longitude: (point['longitude'] as num).toDouble(),
        timestamp: DateTime.parse(point['timestamp'] as String),
        speedKmh: (point['speed_kmh'] as num?)?.toDouble(),
        accuracy: 5.0 + Random().nextDouble() * 5.0, // 5-10–º —Ç–æ—á–Ω–æ—Å—Ç—å
        bearing: Random().nextDouble() * 360, // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      );
    }).toList();
  }
  
  /// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑ TrackPoint'–æ–≤
  double _calculateAverageSpeed(List<TrackPoint> points) {
    if (points.isEmpty) return 0.0;
    
    final speeds = points
        .where((p) => p.speedKmh != null)
        .map((p) => p.speedKmh!)
        .toList();
    
    if (speeds.isEmpty) return 20.0; // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    
    return speeds.reduce((a, b) => a + b) / speeds.length;
  }
  
  /// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑ TrackPoint'–æ–≤
  double _calculateMaxSpeed(List<TrackPoint> points) {
    if (points.isEmpty) return 0.0;
    
    final speeds = points
        .where((p) => p.speedKmh != null)
        .map((p) => p.speedKmh!)
        .toList();
    
    if (speeds.isEmpty) return 35.0; // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    
    return speeds.reduce((a, b) => a > b ? a : b);
  }
  
  /// –ü–æ–º–µ—á–∞–µ—Ç –ø–µ—Ä–≤—ã–µ N —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
  Future<void> _markRoutePointsAsCompleted(Route route, int completedCount) async {
    print('‚úÖ –ü–æ–º–µ—á–∞–µ–º –ø–µ—Ä–≤—ã–µ $completedCount —Ç–æ—á–µ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ');
    
    final orderedPoints = route.pointsOfInterest
        .toList()
      ..sort((a, b) => (a.order ?? 0).compareTo(b.order ?? 0));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–≤—ã—Ö —Ç–æ—á–µ–∫
    for (int i = 0; i < completedCount && i < orderedPoints.length; i++) {
      final point = orderedPoints[i];
      
      // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç–æ—á–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "completed"
      final updatedPoint = _updatePointStatus(point, VisitStatus.completed);
      
      // TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ—á–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      print('   ‚úì –¢–æ—á–∫–∞ ${i + 1}: ${point.name} ‚Üí completed');
    }
  }
  
  /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–æ—á–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞
  IPointOfInterest _updatePointStatus(IPointOfInterest point, VisitStatus newStatus) {
    // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
    // —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º —á–µ—Ä–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    return point; // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
  }
  
  /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç GPS —Ñ–∏–∫—Å—Ç—É—Ä—ã –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> applyGpsFixturesToAllRoutes(User user) async {
    print('üåç –ü—Ä–∏–º–µ–Ω—è–µ–º GPS —Ñ–∏–∫—Å—Ç—É—Ä—ã –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.firstName}');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final routesStream = _routeRepository.watchUserRoutes(user);
      final routes = await routesStream.first;
      
      print('üìç –ù–∞–π–¥–µ–Ω–æ ${routes.length} –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º GPS —Ñ–∏–∫—Å—Ç—É—Ä—ã –∫ –∫–∞–∂–¥–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É
      for (final route in routes) {
        await applyGpsFixturesToRoute(route: route, user: user);
      }
      
      print('‚úÖ GPS —Ñ–∏–∫—Å—Ç—É—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è GPS —Ñ–∏–∫—Å—Ç—É—Ä –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º: $e');
    }
  }
}

/// Factory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è GpsFixtureService
class GpsFixtureServiceFactory {
  static GpsFixtureService create() {
    final routeRepository = GetIt.instance<IRouteRepository>();
    final trackRepository = GetIt.instance<IUserTrackRepository>();
    return GpsFixtureService(routeRepository, trackRepository);
  }
}
