import 'package:get_it/get_it.dart';
import '../../shared/either.dart';
import '../../shared/failures.dart';
import '../domain/app_session.dart';
import '../domain/app_user.dart';
import '../domain/repositories/app_user_repository.dart';
import '../../features/authentication/domain/entities/user_session.dart';
import '../../features/authentication/domain/entities/user.dart';
import '../../features/authentication/domain/repositories/user_repository.dart';
import '../../features/authentication/domain/usecases/get_current_session_usecase.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
/// 
/// –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:
/// - –°–æ–∑–¥–∞–Ω–∏–µ AppSession –∏–∑ UserSession
/// - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AppUser —Å –¥–∞–Ω–Ω—ã–º–∏ Employee
/// - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
/// - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
class AppSessionService {
  static AppSession? _currentSession;
  
  static final GetCurrentSessionUseCase _getSecuritySession = 
      GetIt.instance<GetCurrentSessionUseCase>();

  static AppSession? get currentSession => _currentSession;
  static bool get hasActiveSession => _currentSession?.isValid ?? false;

  static Future<Either<Failure, AppSession>> createFromSecuritySession(
    UserSession securitySession
  ) async {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π AppUser –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ User
      final appUserResult = await _loadAppUserBySecurityUser(securitySession.user);
      
      return appUserResult.fold(
        (failure) {
          print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ AppUser: ${failure.message}');
          return Left(failure);
        },
        (appUser) {
          print('‚úÖ AppUser –∑–∞–≥—Ä—É–∂–µ–Ω: Employee ID ${appUser.employee.id}');
          
          final appSession = AppSession(
            appUser: appUser,
            securitySession: securitySession,
            createdAt: DateTime.now(),
            appSettings: _getDefaultAppSettings(),
          );
          
          _currentSession = appSession;
          return Right(appSession);
        },
      );
    } catch (e) {
      print('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AppSession: $e');
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AppSession: $e'));
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç AppSession –Ω–∞–ø—Ä—è–º—É—é –∏–∑ User (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
  static Future<Either<Failure, AppSession>> createFromSecurityUser(
    User securityUser
  ) async {
    try {
      final sessionResult = await _getSecuritySession.call();
      
      return sessionResult.fold(
        (failure) => Left(failure),
        (userSession) {
          if (userSession == null) {
            return const Left(NotFoundFailure('Security session not found'));
          }
          
          // –°–æ–∑–¥–∞–µ–º AppSession —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
          return createFromSecuritySession(userSession);
        },
      );
    } catch (e) {
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AppSession –∏–∑ User: $e'));
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é AppSession (–∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –µ—Å–ª–∏ –Ω–µ—Ç)
  static Future<Either<Failure, AppSession?>> getCurrentAppSession() async {
    try {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –∏ –æ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞
      if (_currentSession?.isValid == true) {
        return Right(_currentSession);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º security session
      final sessionResult = await _getSecuritySession.call();
      
      return sessionResult.fold(
        (failure) => Left(failure),
        (userSession) async {
          if (userSession == null) {
            _currentSession = null;
            return const Right(null);
          }
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é AppSession
          final appSessionResult = await createFromSecuritySession(userSession);
          
          return appSessionResult.fold(
            (failure) => Left(failure),
            (appSession) => Right(appSession),
          );
        },
      );
    } catch (e) {
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AppSession: $e'));
    }
  }

  static AppSession? updateAppUser(AppUser newAppUser) {
    if (_currentSession != null) {
      _currentSession = _currentSession!.updateAppUser(newAppUser);
    }
    return _currentSession;
  }

  static AppSession? updateAppSettings(Map<String, dynamic> newSettings) {
    if (_currentSession != null) {
      _currentSession = _currentSession!.updateSettings(newSettings);
    }
    return _currentSession;
  }

  static void setCurrentSession(AppSession? session) {
    _currentSession = session;
  }

  /// –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é (–ø—Ä–∏ logout)
  static void clearSession() {
    _currentSession = null;
  }

  static bool isSessionValid() {
    return _currentSession?.isValid ?? false;
  }

  static Map<String, dynamic> _getDefaultAppSettings() {
    return {
      'theme': 'light',
      'language': 'ru',
      'notifications_enabled': true,
      'location_tracking': true,
      'auto_sync': true,
      'map_style': 'standard',
      'route_optimization': true,
    };
  }

  static Future<Either<Failure, AppUser>> _loadAppUserBySecurityUser(User securityUser) async {
    try {
      print('üîç –ü–æ–∏—Å–∫ AppUser –¥–ª—è User: ${securityUser.externalId}');
      
      final userRepository = GetIt.instance<UserRepository>();
      // TODO –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ –∫–∞–∫–æ–º—É id –ø–æ–ª—É—á–∞—Ç—å –≤ –∏—Ç–æ–≥–µ
      final userResult = await userRepository.getUserByExternalId(securityUser.externalId);
      
      return await userResult.fold(
        (failure) async {
          print('‚ùå User –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ: ${securityUser.externalId}: ${failure.message}');
          return Left(NotFoundFailure('User –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ: ${securityUser.externalId}'));
        },
        (databaseUser) async {
          print('‚úÖ User –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ: ${databaseUser.externalId} (ID: ${databaseUser.id})');
          
          if (databaseUser.id == null) {
            print('‚ùå Database User ID —Ä–∞–≤–µ–Ω null');
            return Left(NotFoundFailure('Database User ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null'));
          }
          
          // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º AppUser –ø–æ User ID —á–µ—Ä–µ–∑ app_users —Ç–∞–±–ª–∏—Ü—É
          final appUserRepository = GetIt.instance<AppUserRepository>();
          final appUserResult = await appUserRepository.getAppUserByUserId(databaseUser.id!);
          
          return appUserResult.fold(
            (failure) {
              print('‚ùå AppUser –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è User ${databaseUser.externalId}: ${failure.message}');
              return Left(NotFoundFailure('AppUser –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${databaseUser.externalId}'));
            },
            (appUser) {
              print('‚úÖ AppUser –Ω–∞–π–¥–µ–Ω: Employee ID ${appUser.employee.id}, User ID ${appUser.authUser.id}');
              return Right(appUser);
            },
          );
        },
      );
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ AppUser: $e');
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ AppUser: $e'));
    }
  }
}
