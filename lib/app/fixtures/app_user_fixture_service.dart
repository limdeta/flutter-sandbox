import 'package:get_it/get_it.dart';
import 'package:tauzero/features/authentication/domain/entities/user.dart';
import 'package:tauzero/features/shop/employee/domain/employee.dart';
import 'package:tauzero/features/shop/employee/domain/employee_repository.dart';
import 'package:tauzero/app/domain/app_user.dart';
import 'package:tauzero/app/domain/repositories/app_user_repository.dart';

/// –•—Ä–∞–Ω–∏—Ç —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏
class NameParts {
  final String firstName;
  final String lastName;
  final String? middleName;

  NameParts(this.firstName, this.lastName, this.middleName);
}

/// –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö Employee –∏ AppUser
/// –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å–≤—è–∑–∫–∏ User -> Employee -> AppUser
class AppUserFixtureService {
  final EmployeeRepository _employeeRepository;
  final AppUserRepository _appUserRepository;

  AppUserFixtureService({
    required EmployeeRepository employeeRepository,
    required AppUserRepository appUserRepository,
  }) : _employeeRepository = employeeRepository,
       _appUserRepository = appUserRepository;

  /// –°–æ–∑–¥–∞–µ—Ç Employee –∏ AppUser –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ User
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π AppUser –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
  Future<AppUser> createAppUserForAuthUser(User authUser) async {
    print('üîç –°–æ–∑–¥–∞–Ω–∏–µ AppUser –¥–ª—è User ID: ${authUser.id} (${authUser.phoneNumber.value})');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É User –µ—Å—Ç—å ID
    if (authUser.id == null) {
      throw Exception('User –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ (id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null)');
    }

    // 1. –°–æ–∑–¥–∞–µ–º Employee –Ω–∞ –æ—Å–Ω–æ–≤–µ User
    final nameParts = _extractNameFromPhone(authUser.phoneNumber.value);
    final employee = Employee(
      id: null, // ID –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
      firstName: nameParts.firstName,
      lastName: nameParts.lastName,
      middleName: nameParts.middleName,
      role: _getEmployeeRoleFromUserRole(authUser.role),
    );

    print('üîß –°–æ–∑–¥–∞–µ–º Employee –¥–ª—è User ${authUser.id}: ${employee.firstName} ${employee.lastName}');

    // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º Employee
    final employeeResult = await _employeeRepository.createEmployee(employee);
    final savedEmployee = employeeResult.fold(
      (failure) => throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Employee: $failure'),
      (employee) => employee,
    );

    print('‚úÖ Employee —Å–æ–∑–¥–∞–Ω —Å ID: ${savedEmployee.id}');

    // 3. –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å AppUser (Employee + AuthUser)
    final appUserResult = await _appUserRepository.createAppUser(
      employeeId: savedEmployee.id,
      userId: authUser.id!,
    );

    final appUser = appUserResult.fold(
      (failure) => throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å AppUser: $failure'),
      (appUser) => appUser,
    );

    print('‚úÖ AppUser —Å–æ–∑–¥–∞–Ω: Employee ID ${appUser.employee.id}, User ID ${appUser.authUser.id}');

    return appUser;
  }

  /// –°–æ–∑–¥–∞–µ—Ç AppUser –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö User'–æ–≤
  Future<List<AppUser>> createAppUsersForAuthUsers(List<User> authUsers) async {
    final appUsers = <AppUser>[];
    
    for (final authUser in authUsers) {
      try {
        final appUser = await createAppUserForAuthUser(authUser);
        appUsers.add(appUser);
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AppUser –¥–ª—è ${authUser.phoneNumber.value}: $e');
        rethrow;
      }
    }
    
    return appUsers;
  }

  NameParts _extractNameFromPhone(String phone) {
    if (phone.contains('111-2233')) return NameParts('–ê–ª–µ–∫—Å–µ–π', '–¢–æ—Ä–≥–æ–≤—ã–π', null);
    if (phone.contains('444-5566')) return NameParts('–ú–∞—Ä–∏—è', '–ü—Ä–æ–¥–∞–∂–∫–∏–Ω–∞', null);
    if (phone.contains('000-0001')) return NameParts('–ê–¥–º–∏–Ω', '–ì–ª–∞–≤–Ω—ã–π', null);
    if (phone.contains('000-0002')) return NameParts('–ú–µ–Ω–µ–¥–∂–µ—Ä', '–£–ø—Ä–∞–≤–ª—è—é—â–∏–π', null);
    
    final lastFour = phone.substring(phone.length - 4);
    return NameParts('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', lastFour, null);
  }

  /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å Employee –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ User
  EmployeeRole _getEmployeeRoleFromUserRole(UserRole role) {
    switch (role) {
      case UserRole.admin:
      case UserRole.manager:
        return EmployeeRole.manager;
      case UserRole.user:
        return EmployeeRole.sales;
    }
  }

  /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ—Ö AppUsers (–¥–ª—è dev —Ä–µ–∂–∏–º–∞)
  Future<void> clearAllAppUsers() async {
    print('üßπ –û—á–∏—Å—Ç–∫–∞ AppUsers –¥–ª—è dev —Ä–µ–∂–∏–º–∞...');
    // –ü—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Employee —Å–≤—è–∑–∏ AppUser —Ç–æ–∂–µ —É–¥–∞–ª—è—Ç—Å—è
  }
}

/// Factory –¥–ª—è AppUserFixtureService
class AppUserFixtureServiceFactory {
  static AppUserFixtureService create() {
    return AppUserFixtureService(
      employeeRepository: GetIt.instance<EmployeeRepository>(),
      appUserRepository: GetIt.instance<AppUserRepository>(),
    );
  }
}
