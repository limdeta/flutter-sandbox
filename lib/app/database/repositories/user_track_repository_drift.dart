import 'dart:convert';
import 'package:drift/drift.dart';
import 'package:tauzero/app/database/database.dart';
import '../../../../shared/either.dart';
import '../../../../shared/failures.dart';
import '../../../../features/navigation/tracking/domain/entities/navigation_user.dart';
import '../../../../features/navigation/tracking/domain/entities/user_track.dart';
import '../../../../features/navigation/tracking/domain/entities/compact_track.dart';
import '../../../../features/navigation/tracking/domain/repositories/user_track_repository.dart';
import '../../../features/shop/domain/entities/employee.dart' as domain;
import '../mappers/user_track_mapper.dart';

class UserTrackRepositoryDrift implements UserTrackRepository {
  final AppDatabase _database;
  final EmployeeRepositoryDrift _employeeRepository;

  UserTrackRepositoryDrift(this._database, this._employeeRepository);

  @override
  Future<Either<Failure, UserTrack>> getUserTrackById(int id) async {
    try {
      final userTrackData = await (_database.select(_database.userTracks)
            ..where((tbl) => tbl.id.equals(id)))
          .getSingleOrNull();

      if (userTrackData == null) {
        return Left(const NotFoundFailure('UserTrack not found'));
      }

      // –ü–æ–ª—É—á–∞–µ–º NavigationUser –∏–∑ –±–∞–∑—ã
      final navigationUser = await _getNavigationUserById(userTrackData.userId);
      if (navigationUser == null) {
        return Left(const NotFoundFailure('User not found for UserTrack'));
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º CompactTrack —Å–µ–≥–º–µ–Ω—Ç—ã
      final segments = await _loadCompactTrackSegments(id);

      final userTrack = UserTrackMapper.fromDb(
        userTrackData: userTrackData,
        user: navigationUser,
        segments: segments,
      );

      return Right(userTrack);
    } catch (e) {
      return Left(DatabaseFailure('Failed to get UserTrack: $e'));
    }
  }

  @override
  Future<Either<Failure, List<UserTrack>>> getUserTracks(NavigationUser user) async {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final userId = await _getUserInternalId(user);
      if (userId == null) {
        return Left(const NotFoundFailure('User not found in database'));
      }

      final userTracksData = await (_database.select(_database.userTracks)
            ..where((tbl) => tbl.userId.equals(userId)))
          .get();

      final userTracks = <UserTrack>[];
      for (final data in userTracksData) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞
        final segments = await _loadCompactTrackSegments(data.id);

        final userTrack = UserTrackMapper.fromDb(
          userTrackData: data,
          user: user,
          segments: segments,
        );
        
        userTracks.add(userTrack);
      }

      return Right(userTracks);
    } catch (e) {
      return Left(DatabaseFailure('Failed to get UserTracks: $e'));
    }
  }

  @override
  Future<Either<Failure, List<UserTrack>>> getUserTracksByDateRange(
    NavigationUser user,
    DateTime startDate,
    DateTime endDate,
  ) async {
    try {
      final userId = await _getUserInternalId(user);
      if (userId == null) {
        return Left(const NotFoundFailure('User not found in database'));
      }

      final userTracksData = await (_database.select(_database.userTracks)
            ..where((tbl) => 
                tbl.userId.equals(userId) &
                tbl.startTime.isBiggerOrEqualValue(startDate) &
                tbl.startTime.isSmallerOrEqualValue(endDate)))
          .get();

      final userTracks = <UserTrack>[];
      for (final data in userTracksData) {
        final segments = await _loadCompactTrackSegments(data.id);

        final userTrack = UserTrackMapper.fromDb(
          userTrackData: data,
          user: user,
          segments: segments,
        );
        
        userTracks.add(userTrack);
      }

      return Right(userTracks);
    } catch (e) {
      return Left(DatabaseFailure('Failed to get UserTracks by date range: $e'));
    }
  }

  @override
  Future<Either<Failure, UserTrack?>> getActiveUserTrack(NavigationUser user) async {
    try {
      final userId = await _getUserInternalId(user);
      if (userId == null) {
        return Left(const NotFoundFailure('User not found in database'));
      }

      final activeTrackData = await (_database.select(_database.userTracks)
            ..where((tbl) => 
                tbl.userId.equals(userId) &
                tbl.endTime.isNull()))
          .getSingleOrNull();

      if (activeTrackData == null) {
        return Right(null);
      }

      final segments = await _loadCompactTrackSegments(activeTrackData.id);

      final userTrack = UserTrackMapper.fromDb(
        userTrackData: activeTrackData,
        user: user,
        segments: segments,
      );

      return Right(userTrack);
    } catch (e) {
      return Left(DatabaseFailure('Failed to get active UserTrack: $e'));
    }
  }

  @override
  Future<Either<Failure, UserTrack>> saveUserTrack(UserTrack track) async {
    try {
      print('üíæ –ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è UserTrack –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${track.user.id} (${track.user.fullName})');
      
      final userId = await _getUserInternalId(track.user);
      if (userId == null) {
        print('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${track.user.id} (${track.user.fullName})');
        return Left(const NotFoundFailure('User not found in database'));
      }
      
      print('‚úÖ –ù–∞–π–¥–µ–Ω –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å UserTrack
      final userTrackCompanion = UserTracksCompanion.insert(
        userId: userId,
        startTime: track.startTime,
        status: track.status.name,
        totalPoints: Value(track.totalPoints),
        totalDistanceKm: Value(track.totalDistanceKm),
        totalDurationSeconds: Value(track.totalDuration.inSeconds),
        endTime: Value(track.endTime),
        metadata: Value(_encodeMetadata(track.metadata)),
      );

      final userTrackId = await _database.into(_database.userTracks).insert(userTrackCompanion);
      print('‚úÖ UserTrack —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: $userTrackId');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã CompactTrack
      for (int i = 0; i < track.segments.length; i++) {
        final segment = track.segments[i];
        
        final compactTrackCompanion = UserTrackMapper.compactTrackToCompanion(
          segment,
          userTrackId,
          i,
        );

        await _database.into(_database.compactTracks).insert(compactTrackCompanion);
      }
      
      print('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${track.segments.length} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ CompactTrack');

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç—Ä–µ–∫ —Å –Ω–æ–≤—ã–º ID
      final savedTrack = UserTrack(
        id: userTrackId,
        user: track.user,
        status: track.status,
        startTime: track.startTime,
        endTime: track.endTime,
        segments: track.segments,
        totalPoints: track.totalPoints,
        totalDistanceKm: track.totalDistanceKm,
        totalDuration: track.totalDuration,
        metadata: track.metadata,
      );

      return Right(savedTrack);
    } catch (e) {
      print('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ UserTrack: $e');
      return Left(DatabaseFailure('Failed to save UserTrack: $e'));
    }
  }

  @override
  Future<Either<Failure, UserTrack>> updateUserTrack(UserTrack track) async {
    try {
      final userId = await _getUserInternalId(track.user);
      if (userId == null) {
        return Left(const NotFoundFailure('User not found in database'));
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å
      final userTrackCompanion = UserTracksCompanion(
        id: Value(track.id),
        userId: Value(userId),
        startTime: Value(track.startTime),
        endTime: Value(track.endTime),
        status: Value(track.status.name),
        totalPoints: Value(track.totalPoints),
        totalDistanceKm: Value(track.totalDistanceKm),
        totalDurationSeconds: Value(track.totalDuration.inSeconds),
        metadata: Value(_encodeMetadata(track.metadata)),
        updatedAt: Value(DateTime.now()),
      );

      await (_database.update(_database.userTracks)
            ..where((tbl) => tbl.id.equals(track.id)))
          .write(userTrackCompanion);

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
      await (_database.delete(_database.compactTracks)
            ..where((tbl) => tbl.userTrackId.equals(track.id)))
          .go();

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
      for (int i = 0; i < track.segments.length; i++) {
        final segment = track.segments[i];
        
        final compactTrackCompanion = UserTrackMapper.compactTrackToCompanion(
          segment,
          track.id,
          i,
        );

        await _database.into(_database.compactTracks).insert(compactTrackCompanion);
      }

      return Right(track);
    } catch (e) {
      return Left(DatabaseFailure('Failed to update UserTrack: $e'));
    }
  }

  @override
  Future<Either<Failure, void>> deleteUserTrack(UserTrack track) async {
    try {
      // –£–¥–∞–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã (–∫–∞—Å–∫–∞–¥–Ω–æ —É–¥–∞–ª—è—Ç—Å—è –∏–∑-–∑–∞ onDelete: KeyAction.cascade)
      await (_database.delete(_database.userTracks)
            ..where((tbl) => tbl.id.equals(track.id)))
          .go();

      return Right(null);
    } catch (e) {
      return Left(DatabaseFailure('Failed to delete UserTrack: $e'));
    }
  }

  // =====================================================
  // HELPER METHODS
  // =====================================================

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–µ–≥–º–µ–Ω—Ç—ã CompactTrack –¥–ª—è UserTrack
  Future<List<CompactTrack>> _loadCompactTrackSegments(int userTrackId) async {
    final segmentsData = await (_database.select(_database.compactTracks)
          ..where((tbl) => tbl.userTrackId.equals(userTrackId))
          ..orderBy([(tbl) => OrderingTerm.asc(tbl.segmentOrder)]))
        .get();

    return segmentsData.map((data) => UserTrackMapper.compactTrackFromDb(data)).toList();
  }

  /// –ö–æ–¥–∏—Ä—É–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ JSON
  String? _encodeMetadata(Map<String, dynamic>? metadata) {
    if (metadata == null || metadata.isEmpty) return null;
    try {
      return jsonEncode(metadata);
    } catch (e) {
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π database ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ EmployeeRepository
  Future<int?> _getUserInternalId(NavigationUser user) async {
    if (user.runtimeType.toString().contains('AppUser')) {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º duck typing - –µ—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å –ø–æ–ª–µ employee, –∏–∑–≤–ª–µ–∫–∞–µ–º –µ–≥–æ
        final dynamic appUser = user;
        if (appUser.employee != null) {
          final employee = appUser.employee as domain.Employee;
          print('‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω Employee –∏–∑ AppUser: ${employee.id} (${employee.fullName})');
          
          final result = await _employeeRepository.getInternalIdForNavigationUser(employee);
          return result.fold(
            (failure) {
              print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ ID –∏–∑ AppUser.employee: ${failure.message}');
              return null;
            },
            (id) {
              print('‚úÖ –ü–æ–ª—É—á–µ–Ω –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∏–∑ AppUser.employee: $id');
              return id;
            },
          );
        }
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Employee –∏–∑ AppUser: $e');
        return null;
      }
    }
    
    // –ü—Ä–∏–≤–æ–¥–∏–º NavigationUser –∫ Employee
    if (user is! domain.Employee) {
      print('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Employee: ${user.runtimeType}');
      return null;
    }
    
    
    final result = await _employeeRepository.getInternalIdForNavigationUser(user);
    return result.fold(
      (failure) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ ID: ${failure.message}');
        return null;
      },
      (id) {
        return id;
      },
    );
  }

  Future<NavigationUser?> _getNavigationUserById(int id) async {
    final result = await _employeeRepository.getNavigationUserById(id);
    return result.fold(
      (failure) => null,
      (employee) => employee,
    );
  }
}
