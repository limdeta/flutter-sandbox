import '../../../../features/shop/employee/domain/employee.dart' as domain;
import '../../../../features/shop/employee/domain/employee_repository.dart';
import '../../../../shared/either.dart';
import '../../../../shared/failures.dart';
import '../app_database.dart' as db;
import '../mappers/employee_mapper.dart';

class EmployeeRepositoryDrift implements EmployeeRepository {
  final db.AppDatabase _database;

  EmployeeRepositoryDrift(this._database);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
  @override
  Future<Either<Failure, domain.Employee>> createEmployee(domain.Employee employee) async {
    try {
      final companion = EmployeeMapper.toDb(employee);
      final id = await _database.into(_database.employees).insert(companion);
      
      final createdEmployee = domain.Employee(
        id: id,
        lastName: employee.lastName,
        firstName: employee.firstName,
        middleName: employee.middleName,
        role: employee.role,
      );
      return Right(createdEmployee);
    } catch (e) {
      return Left(DatabaseFailure('Failed to create employee: $e'));
    }
  }

  @override
  Future<Either<Failure, List<domain.Employee>>> getAllEmployees() async {
    try {
      final dbEmployees = await _database.select(_database.employees).get();
      final employees = dbEmployees.map(EmployeeMapper.fromDb).toList().cast<domain.Employee>();
      return Right(employees);
    } catch (e) {
      return Left(DatabaseFailure('Failed to get all employees: $e'));
    }
  }

  @override
  Future<Either<Failure, domain.Employee?>> getEmployeeById(int id) async {
    try {
      final query = _database.select(_database.employees)
        ..where((employee) => employee.id.equals(id));
      
      final dbEmployee = await query.getSingleOrNull();
      if (dbEmployee == null) return const Right(null);
      
      final employee = EmployeeMapper.fromDb(dbEmployee);
      return Right(employee);
    } catch (e) {
      return Left(DatabaseFailure('Failed to get employee by id: $e'));
    }
  }

  // –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ ID (–¥–ª—è AppUserRepository)
  Future<Either<Failure, domain.Employee>> getById(int id) async {
    try {
      final query = _database.select(_database.employees)
        ..where((employee) => employee.id.equals(id));
      
      final dbEmployee = await query.getSingleOrNull();
      if (dbEmployee == null) {
        return Left(NotFoundFailure('Employee with id $id not found'));
      }
      
      final employee = EmployeeMapper.fromDb(dbEmployee);
      return Right(employee);
    } catch (e) {
      return Left(DatabaseFailure('Failed to get employee by id: $e'));
    }
  }

  @override
  Future<Either<Failure, void>> deleteEmployee(int id) async {
    try {
      await (_database.delete(_database.employees)
        ..where((employee) => employee.id.equals(id))).go();
      return const Right(null);
    } catch (e) {
      return Left(DatabaseFailure('Failed to delete employee: $e'));
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π database ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è NavigationUser
  @override
  Future<Either<Failure, int?>> getInternalIdForNavigationUser(domain.Employee navigationUser) async {
    try {
      print('üîç getInternalIdForNavigationUser: Employee ID = ${navigationUser.id}');
      print('üîç getInternalIdForNavigationUser: Employee fullName = ${navigationUser.fullName}');
      
      // –ü–æ—Å–∫–æ–ª—å–∫—É Employee —É–∂–µ —Ä–µ–∞–ª–∏–∑—É–µ—Ç NavigationUser –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç database ID
      // –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ id (–µ—Å–ª–∏ –æ–Ω –Ω–µ 0, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω)
      final id = navigationUser.id == 0 ? null : navigationUser.id;
      
      if (id == null) {
        print('‚ùå Employee ID —Ä–∞–≤–µ–Ω 0 - –æ–±—ä–µ–∫—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ!');
      } else {
        print('‚úÖ Employee ID –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: $id');
      }
      
      return Right(id);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ getInternalIdForNavigationUser: $e');
      return Left(DatabaseFailure('Failed to get internal ID: $e'));
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç NavigationUser –Ω–∞ –æ—Å–Ω–æ–≤–µ database ID
  @override
  Future<Either<Failure, domain.Employee?>> getNavigationUserById(int id) async {
    try {
      final employeeResult = await getEmployeeById(id);
      return employeeResult.fold(
        (failure) => Left(failure),
        (employee) => Right(employee),
      );
    } catch (e) {
      return Left(DatabaseFailure('Failed to get navigation user by id: $e'));
    }
  }
}
