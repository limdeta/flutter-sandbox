import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';
import 'package:latlong2/latlong.dart';
import 'package:provider/provider.dart';
import 'package:tauzero/app/services/app_session_service.dart';
import 'package:tauzero/app/providers/selected_route_provider.dart';
import 'package:tauzero/app/presentation/widgets/combined_map_widget.dart';
import 'package:tauzero/features/navigation/map/domain/entities/map_point.dart';
import 'package:tauzero/features/navigation/path_predictor/osrm_path_prediction_service.dart';
import 'package:tauzero/features/navigation/tracking/presentation/providers/user_tracks_provider.dart';
import 'package:tauzero/features/shop/route/domain/entities/point_of_interest.dart';
import 'package:tauzero/features/shop/route/domain/repositories/route_repository.dart';
import 'package:tauzero/features/shop/route/domain/entities/route.dart' as shop;
import 'package:tauzero/features/shop/route/presentation/pages/route_detail_page.dart';


/// –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –∫–∞—Ä—Ç–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è
class SalesRepHomePage extends StatefulWidget {
  final shop.Route? selectedRoute; // –ú–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞

  const SalesRepHomePage({
    super.key,
    this.selectedRoute,
  });

  @override
  State<SalesRepHomePage> createState() => _SalesRepHomePageState();
}

class _SalesRepHomePageState extends State<SalesRepHomePage> {
  final RouteRepository _routeRepository = GetIt.instance<RouteRepository>();
  
  shop.Route? _currentRoute;
  bool _isLoading = true;
  String? _error;
  bool _showRoutePanel = true;
  bool _hasLoadedInitialRoute = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  List<LatLng> _routePolylinePoints = [];
  bool _isBuildingRoute = false;

  @override
  void initState() {
    super.initState();
    _loadUserAndRoutes();
  }

  Future<void> _loadUserAndRoutes() async {
    try {
      setState(() {
        _isLoading = true;
        _error = null;
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      final sessionResult = await AppSessionService.getCurrentAppSession();
      if (sessionResult.isLeft()) {
        setState(() {
          _error = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
          _isLoading = false;
        });
        return;
      }

      final session = sessionResult.fold((l) => throw Exception(l), (r) => r);
      if (session == null) {
        setState(() {
          _error = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏';
          _isLoading = false;
        });
        return;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫–∏ —á–µ—Ä–µ–∑ Provider  
      final tracksProvider = Provider.of<UserTracksProvider>(context, listen: false);
      await tracksProvider.loadUserTracks(session.appUser);

      // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Employee
      _routeRepository.watchEmployeeRoutes(session.appUser.employee).listen(
        (routes) async {
          if (mounted) {
            final selectedRouteProvider = Provider.of<SelectedRouteProvider>(context, listen: false);
            
            shop.Route? routeToDisplay;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
            if (!_hasLoadedInitialRoute) {
              // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç ‚Üí —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä
              if (widget.selectedRoute != null) {
                // 1. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                routeToDisplay = widget.selectedRoute!;
                await selectedRouteProvider.setSelectedRoute(routeToDisplay);
                print('üìç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: ${routeToDisplay.name}');
              } else {
                // 2. –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                final savedRouteFound = await selectedRouteProvider.loadSavedSelection(routes);
                
                if (savedRouteFound && selectedRouteProvider.selectedRoute != null) {
                  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                  routeToDisplay = selectedRouteProvider.selectedRoute!;
                  print('üìç –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: ${routeToDisplay.name}');
                } else {
                  // 3. Fallback: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
                  routeToDisplay = _findCurrentRoute(routes);
                  if (routeToDisplay != null) {
                    await selectedRouteProvider.setSelectedRoute(routeToDisplay);
                    print('üìç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –º–∞—Ä—à—Ä—É—Ç: ${routeToDisplay.name}');
                  }
                }
              }
              
              _hasLoadedInitialRoute = true; // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            } else {
              // –ü—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
              routeToDisplay = selectedRouteProvider.selectedRoute ?? _currentRoute;
            }
            
            setState(() {
              _currentRoute = routeToDisplay;
              _isLoading = false;
            });
          }
        },
        onError: (error) {
          if (mounted) {
            setState(() {
              _error = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤: $error';
              _isLoading = false;
            });
          }
        },
      );
    } catch (e) {
      setState(() {
        _error = '–û—à–∏–±–∫–∞: $e';
        _isLoading = false;
      });
    }
  }

  shop.Route? _findCurrentRoute(List<shop.Route> routes) {
    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    var activeRoute = routes.where((r) => r.status == shop.RouteStatus.active).firstOrNull;
    if (activeRoute != null) {
      return activeRoute;
    }
    
    // –ò—â–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç
    final today = DateTime.now();
    
    var todayRoute = routes.where((r) {
      if (r.startTime == null) return false;
      return r.startTime!.year == today.year &&
             r.startTime!.month == today.month &&
             r.startTime!.day == today.day;
    }).firstOrNull;
    
    if (todayRoute != null) {
      print('üìå –ù–∞–π–¥–µ–Ω —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç: ${todayRoute.name}');
      return todayRoute;
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    if (routes.isNotEmpty) {
      print('üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: ${routes.first.name}');
      return routes.first;
    }
    
    print('‚ùå –ú–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return null;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // –ö–∞—Ä—Ç–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –≤–µ—Å—å —ç–∫—Ä–∞–Ω
          _buildMapArea(),
          
          // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å: –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é + –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ
          if (!_isLoading && _currentRoute != null)
            _buildTopPanelWithMenu(),
          
          // –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ —Ç–æ—á–∫–∞–º (—Å–∫—Ä—ã–≤–∞–µ–º–∞—è)
          if (!_isLoading && _currentRoute != null && _showRoutePanel)
            _buildBottomPanel(),
          
          // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
          if (_isLoading)
            _buildLoadingOverlay(),
            
          // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          if (_error != null)
            _buildErrorOverlay(),
        ],
      )
    );
  }

  Widget _buildMapArea() {
    return Consumer2<SelectedRouteProvider, UserTracksProvider>(
      builder: (context, selectedRouteProvider, tracksProvider, child) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–∞—Ä—à—Ä—É—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
        final routeToShow = selectedRouteProvider.selectedRoute ?? _currentRoute;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        final routeTracks = tracksProvider.userTracks;
        
        return CombinedMapWidget(
          route: routeToShow,
          historicalTracks: routeTracks,
          onTap: (point) {
            // TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞—Ä—Ç—É
            print('–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–∞—Ä—Ç—É: ${point.latitude}, ${point.longitude}');
          },
          routePolylinePoints: _routePolylinePoints,
        );
      },
    );
  }

  Widget _buildTopPanelWithMenu() {
    return Consumer<SelectedRouteProvider>(
      builder: (context, selectedRouteProvider, child) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–∞—Ä—à—Ä—É—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
        final routeToShow = selectedRouteProvider.selectedRoute ?? _currentRoute;
        
        if (routeToShow == null) return const SizedBox.shrink();
        
        return Positioned(
          top: MediaQuery.of(context).padding.top,
          left: 0,
          right: 0,
          child: Container(
            decoration: BoxDecoration(
              color: Colors.white,
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  offset: const Offset(0, 2),
                  blurRadius: 4,
                ),
              ],
            ),
            child: Row(
              children: [
                // –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é
                Container(
                  width: 60,
                  height: 60,
                  decoration: const BoxDecoration(
                    color: Colors.blue,
                  ),
                  child: IconButton(
                    onPressed: () {
                      Navigator.pushNamed(context, '/menu');
                    },
                    icon: const Icon(Icons.menu, color: Colors.white, size: 24),
                  ),
                ),
                
                // –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è)
                Expanded(
                  child: GestureDetector(
                    onTap: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => RouteDetailPage(route: routeToShow),
                        ),
                      );
                    },
                    child: Container(
                      height: 60,
                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          // –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
                          Text(
                            routeToShow.name,
                            style: const TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 16,
                            ),
                            maxLines: 1,
                            overflow: TextOverflow.ellipsis,
                          ),
                          
                          // –°—Ç–∞—Ç—É—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
                          Row(
                            children: [
                              Text(
                                _getRouteStatusText(routeToShow.status),
                                style: TextStyle(
                                  color: _getRouteStatusColor(routeToShow.status),
                                  fontSize: 12,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                              const Text(
                                ' ‚Ä¢ ',
                                style: TextStyle(
                                  color: Colors.grey,
                                  fontSize: 12,
                                ),
                              ),
                              Text(
                                '${routeToShow.pointsOfInterest.length} —Ç–æ—á–µ–∫',
                                style: const TextStyle(
                                  color: Colors.grey,
                                  fontSize: 12,
                                ),
                              ),
                              const Text(
                                ' ‚Ä¢ ',
                                style: TextStyle(
                                  color: Colors.grey,
                                  fontSize: 12,
                                ),
                              ),
                              Text(
                                '${_getCompletedCount()} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
                                style: const TextStyle(
                                  color: Colors.grey,
                                  fontSize: 12,
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
                
                // –ö–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –Ω–∏–∂–Ω—é—é –ø–∞–Ω–µ–ª—å
                Container(
                  width: 50,
                  height: 60,
                  decoration: BoxDecoration(
                    color: Colors.grey.shade100,
                    border: Border(
                      left: BorderSide(color: Colors.grey.shade300),
                    ),
                  ),
                  child: IconButton(
                    icon: Icon(
                      _showRoutePanel ? Icons.keyboard_arrow_up : Icons.keyboard_arrow_down,
                      color: Colors.grey.shade700,
                    ),
                    onPressed: () {
                      setState(() {
                        _showRoutePanel = !_showRoutePanel;
                      });
                    },
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildBottomPanel() {
    return Positioned(
      bottom: 0,
      left: 0,
      right: 0,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: ElevatedButton(
          onPressed: _isBuildingRoute ? null : _buildRoute,
          style: ElevatedButton.styleFrom(
            minimumSize: const Size.fromHeight(48),
          ),
          child: _isBuildingRoute
              ? const CircularProgressIndicator()
              : const Text('–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç'),
        ),
      ),
    );
  }

  Widget _buildLoadingOverlay() {
    return Container(
      color: Colors.black.withOpacity(0.3),
      child: const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CircularProgressIndicator(),
            SizedBox(height: 16),
            Text(
              '–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞...',
              style: TextStyle(
                color: Colors.white,
                fontSize: 16,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildErrorOverlay() {
    return Container(
      color: Colors.black.withOpacity(0.3),
      child: Center(
        child: Card(
          margin: const EdgeInsets.all(32),
          child: Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                const Icon(
                  Icons.error_outline,
                  size: 48,
                  color: Colors.red,
                ),
                const SizedBox(height: 16),
                Text(
                  _error!,
                  textAlign: TextAlign.center,
                  style: const TextStyle(fontSize: 16),
                ),
                const SizedBox(height: 16),
                ElevatedButton(
                  onPressed: _loadUserAndRoutes,
                  child: const Text('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Color _getRouteStatusColor(shop.RouteStatus status) {
    switch (status) {
      case shop.RouteStatus.planned:
        return Colors.blue;
      case shop.RouteStatus.active:
        return Colors.orange;
      case shop.RouteStatus.completed:
        return Colors.green;
      case shop.RouteStatus.cancelled:
        return Colors.red;
      case shop.RouteStatus.paused:
        return Colors.grey;
    }
  }

  String _getRouteStatusText(shop.RouteStatus status) {
    switch (status) {
      case shop.RouteStatus.planned:
        return '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω';
      case shop.RouteStatus.active:
        return '–ê–∫—Ç–∏–≤–Ω—ã–π';
      case shop.RouteStatus.completed:
        return '–ó–∞–≤–µ—Ä—à–µ–Ω';
      case shop.RouteStatus.cancelled:
        return '–û—Ç–º–µ–Ω–µ–Ω';
      case shop.RouteStatus.paused:
        return '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
    }
  }

  int _getCompletedCount() {
    return _currentRoute!.pointsOfInterest
        .where((point) => point.isVisited)
        .length;
  }

  /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ OSRM
  Future<void> _buildRoute() async {
    if (_currentRoute == null) return;
    
    print('üöÄ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞—á–∞—Ç–æ –¥–ª—è ${_currentRoute!.pointsOfInterest.length} —Ç–æ—á–µ–∫');
    
    setState(() {
      _isBuildingRoute = true;
    });

    try {
      final pathPredictionService = GetIt.instance<OsrmPathPredictionService>();
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Ç–æ—á–∫—É (–∏–Ω–¥–µ–∫—Å –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞)
      int lastCompletedIndex = -1;
      for (int i = 0; i < _currentRoute!.pointsOfInterest.length; i++) {
        if (_currentRoute!.pointsOfInterest[i].status == VisitStatus.completed) {
          lastCompletedIndex = i;
        }
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π
      // –ò–Ω–∞—á–µ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
      final startIndex = lastCompletedIndex >= 0 ? lastCompletedIndex : 0;
      final routePoints = _currentRoute!.pointsOfInterest.sublist(startIndex);
      
      if (routePoints.length < 2) {
        print('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2, –µ—Å—Ç—å ${routePoints.length})');
        return;
      }

      print('üéØ –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç —Ç–æ—á–∫–∏ ${startIndex + 1} –¥–æ –∫–æ–Ω—Ü–∞: ${routePoints.length} —Ç–æ—á–µ–∫');

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ MapPoint –¥–ª—è OSRM —Å–µ—Ä–≤–∏—Å–∞
      final mapPoints = routePoints.map((poi) => MapPoint(
        latitude: poi.coordinates.latitude,
        longitude: poi.coordinates.longitude,
      )).toList();

      // –í—ã–∑—ã–≤–∞–µ–º OSRM —Å–µ—Ä–≤–∏—Å
      final result = await pathPredictionService.predictRouteGeometry(mapPoints);
      
      if (result.routePoints.isNotEmpty) {
        final polylinePoints = result.routePoints.map((point) => 
          LatLng(point.latitude, point.longitude)
        ).toList();
        
        setState(() {
          _routePolylinePoints = polylinePoints;
        });
        
        print('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ: ${polylinePoints.length} —Ç–æ—á–µ–∫');
      } else {
        print('‚ùå OSRM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: $e');
    } finally {
      setState(() {
        _isBuildingRoute = false;
      });
    }
  }
}