import 'dart:io';
import 'package:flutter_test/flutter_test.dart';
import 'package:drift/native.dart';
import 'package:drift/drift.dart' as drift;
import 'package:get_it/get_it.dart';
import 'package:path/path.dart' as path;
import 'package:tauzero/app/database/database.dart';


/// –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –†–ï–ê–õ–¨–ù–´–• –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å —Ñ–∞–π–ª–æ–≤–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
/// 
/// –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª test_integration.db –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ DB Browser
/// –∏–ª–∏ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º SQLite –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
class RealDatabaseTestHelper {
  late AppDatabase database;
  late String databasePath;
  late UserRepositoryImpl userRepository;
  late RouteRepository routeRepository;
  late UserTrackRepository userTrackRepository;
  late CompactTrackRepository compactTrackRepository;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ñ–∞–π–ª–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  Future<void> initialize() async {
    // –û—á–∏—â–∞–µ–º GetIt –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    if (GetIt.instance.isRegistered<AppDatabase>()) {
      await GetIt.instance.unregister<AppDatabase>();
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    final testDbDir = Directory('test_db');
    if (!await testDbDir.exists()) {
      await testDbDir.create();
    }
    
    databasePath = path.join(testDbDir.path, 'test_integration.db');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –µ—Å–ª–∏ –µ—Å—Ç—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
    final dbFile = File(databasePath);
    if (await dbFile.exists()) {
      await dbFile.delete();
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ñ–∞–π–ª–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    final connection = drift.DatabaseConnection(
      NativeDatabase(File(databasePath))
    );
    
    database = AppDatabase.forTesting(connection);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ GetIt –¥–ª—è mapper'–æ–≤
    GetIt.instance.registerSingleton<AppDatabase>(database);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    userRepository = UserRepository(database: database);
    routeRepository = RouteRepository(database);
    userTrackRepository = UserTrackRepository(database, userRepository, routeRepository);
    compactTrackRepository = CompactTrackRepository(database);
    
    print('‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: $databasePath');
    print('üìÅ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ DB Browser for SQLite –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
  }

  /// –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ (–ù–ï —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ë–î –¥–ª—è –∏–Ω—Å–ø–µ–∫—Ü–∏–∏!)
  Future<void> dispose() async {
    await database.close();
    
    // –û—á–∏—â–∞–µ–º GetIt –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    if (GetIt.instance.isRegistered<AppDatabase>()) {
      await GetIt.instance.unregister<AppDatabase>();
    }
    
    print('üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞, —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $databasePath');
    print('üîç –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ DB Browser –¥–ª—è –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
  }

  /// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü (–¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É)
  Future<void> clearAllTables() async {
    await database.transaction(() async {
      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å —É—á–µ—Ç–æ–º foreign keys)
      await database.delete(database.compactTracks).go();
      await database.delete(database.userTracks).go();
      await database.delete(database.pointStatusHistoryTable).go();
      await database.delete(database.pointsOfInterestTable).go();
      await database.delete(database.tradingPointsTable).go();
      await database.delete(database.routesTable).go();
      await database.delete(database.userEntries).go();
    });
    
    print('üßπ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã');
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–±–ª–∏—Ü –¥–ª—è –¥–µ–±–∞–≥–∞
  Future<void> showTableStats() async {
    final usersCount = await database.select(database.userEntries).get().then((rows) => rows.length);
    final routesCount = await database.select(database.routesTable).get().then((rows) => rows.length);
    final userTracksCount = await database.select(database.userTracks).get().then((rows) => rows.length);
    final compactTracksCount = await database.select(database.compactTracks).get().then((rows) => rows.length);
    
    print('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    print('   Users: $usersCount –∑–∞–ø–∏—Å–µ–π');
    print('   Routes: $routesCount –∑–∞–ø–∏—Å–µ–π');
    print('   UserTracks: $userTracksCount –∑–∞–ø–∏—Å–µ–π');
    print('   CompactTracks: $compactTracksCount –∑–∞–ø–∏—Å–µ–π');
  }
}
