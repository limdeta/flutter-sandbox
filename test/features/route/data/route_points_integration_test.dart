import 'package:flutter_test/flutter_test.dart';
import 'package:latlong2/latlong.dart';
import 'package:tauzero/features/route/domain/entities/route.dart';
import 'package:tauzero/features/route/domain/entities/regular_point_of_interest.dart';
import 'package:tauzero/features/route/domain/entities/trading_point_of_interest.dart';
import 'package:tauzero/features/route/domain/entities/trading_point.dart';
import 'package:tauzero/features/route/domain/entities/ipoint_of_interest.dart';
import '../../../helpers/test_database_helper.dart';

void main() {
  group('Route Points Integration Tests', () {
    final dbHelper = TestDatabaseHelper();

    setUp(() async {
      await dbHelper.setUp();
      dbHelper.resetFactories();
    });

    tearDown(() async {
      await dbHelper.tearDown();
    });

    test('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç —Å —Ç–æ—á–∫–∞–º–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –∏–∑ –ë–î', () async {
      print('üß™ –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ —Å —Ç–æ—á–∫–∞–º–∏');
      
      // 1. –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Ç–æ—á–µ–∫
      final route = Route(
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç',
        description: '–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—á–µ–∫',
        createdAt: DateTime.now(),
        startTime: DateTime.now(),
        status: RouteStatus.planned,
        pointsOfInterest: [
          // –û–±—ã—á–Ω–∞—è —Ç–æ—á–∫–∞
          RegularPointOfInterest(
            name: '–°–∫–ª–∞–¥',
            description: '–¢–æ—á–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞',
            coordinates: const LatLng(43.1158, 131.8858),
            type: PointType.warehouse,
            plannedArrivalTime: DateTime.now(),
            plannedDepartureTime: DateTime.now().add(const Duration(minutes: 30)),
            status: VisitStatus.planned,
            order: 1,
          ),
          
          // –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞
          TradingPointOfInterest(
            name: '–í–∏–∑–∏—Ç –∫ –∫–ª–∏–µ–Ω—Ç—É',
            tradingPoint: TradingPoint(
              externalId: 'CLIENT_TEST_001',
              name: '–û–û–û "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç"',
              inn: '1234567890',
            ),
            coordinates: const LatLng(43.1356, 131.9113),
            plannedArrivalTime: DateTime.now().add(const Duration(hours: 1)),
            plannedDepartureTime: DateTime.now().add(const Duration(hours: 2)),
            status: VisitStatus.planned,
            order: 2,
          ),
          
          // –ï—â–µ –æ–¥–Ω–∞ –æ–±—ã—á–Ω–∞—è —Ç–æ—á–∫–∞
          RegularPointOfInterest(
            name: '–û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤',
            description: '–ö–∞—Ñ–µ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞',
            coordinates: const LatLng(43.1200, 131.9000),
            type: PointType.break_,
            plannedArrivalTime: DateTime.now().add(const Duration(hours: 3)),
            plannedDepartureTime: DateTime.now().add(const Duration(hours: 4)),
            status: VisitStatus.planned,
            order: 3,
          ),
        ],
      );
      
      print('üìù –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç —Å ${route.pointsOfInterest.length} —Ç–æ—á–∫–∞–º–∏:');
      for (var point in route.pointsOfInterest) {
        print('  - ${point.name} (order: ${point.order})');
      }
      
      // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
      final createResult = await dbHelper.repository.createRoute(route, dbHelper.testUser);
      
      expect(createResult.isRight(), true, reason: '–ú–∞—Ä—à—Ä—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      
      final createdRoute = createResult.fold((l) => throw Exception(l), (r) => r);
      print('‚úÖ –ú–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω —Å ID: ${createdRoute.id}');
      
      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∞—Ä—à—Ä—É—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ—á–µ–∫
      expect(createdRoute.pointsOfInterest.length, equals(3), 
             reason: '–°–æ–∑–¥–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 —Ç–æ—á–∫–∏');
      
      // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –ø–æ ID –∏–∑ –ë–î
      final loadResult = await dbHelper.repository.getRouteByInternalId(createdRoute.id!);
      
      expect(loadResult.isRight(), true, reason: '–ú–∞—Ä—à—Ä—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω –ø–æ ID');
      
      final loadedRoute = loadResult.fold((l) => throw Exception(l), (r) => r);
      print('üìã –ó–∞–≥—Ä—É–∂–µ–Ω –º–∞—Ä—à—Ä—É—Ç —Å ${loadedRoute.pointsOfInterest.length} —Ç–æ—á–∫–∞–º–∏');
      
      // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ç–æ—á–∫–∏
      expect(loadedRoute.pointsOfInterest.length, equals(3), 
             reason: '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 —Ç–æ—á–∫–∏');
      
      // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏
      final points = loadedRoute.pointsOfInterest..sort((a, b) => (a.order ?? 0).compareTo(b.order ?? 0));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É (—Å–∫–ª–∞–¥)
      expect(points[0].name, equals('–°–∫–ª–∞–¥'));
      expect(points[0].order, equals(1));
      expect(points[0] is RegularPointOfInterest, true);
      if (points[0] is RegularPointOfInterest) {
        final regPoint = points[0] as RegularPointOfInterest;
        expect(regPoint.type, equals(PointType.warehouse));
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä—É—é —Ç–æ—á–∫—É (—Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞)
      expect(points[1].name, equals('–í–∏–∑–∏—Ç –∫ –∫–ª–∏–µ–Ω—Ç—É'));
      expect(points[1].order, equals(2));
      expect(points[1] is TradingPointOfInterest, true);
      if (points[1] is TradingPointOfInterest) {
        final tradingPoint = points[1] as TradingPointOfInterest;
        expect(tradingPoint.tradingPoint.name, equals('–û–û–û "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç"'));
        expect(tradingPoint.tradingPoint.externalId, equals('CLIENT_TEST_001'));
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ—Ç—å—é —Ç–æ—á–∫—É (–ø–µ—Ä–µ—Ä—ã–≤)
      expect(points[2].name, equals('–û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤'));
      expect(points[2].order, equals(3));
      expect(points[2] is RegularPointOfInterest, true);
      
      print('‚úÖ –í—Å–µ —Ç–æ—á–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î');
      
      // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ watchUserRoutes
      final routesStream = dbHelper.repository.watchUserRoutes(dbHelper.testUser);
      final userRoutes = await routesStream.first;
      
      expect(userRoutes.length, equals(1), reason: '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω 1 –º–∞—Ä—à—Ä—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      
      final userRoute = userRoutes.first;
      expect(userRoute.pointsOfInterest.length, equals(3), 
             reason: '–ú–∞—Ä—à—Ä—É—Ç –∏–∑ watchUserRoutes –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 —Ç–æ—á–∫–∏');
      
      print('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ watchUserRoutes —Å ${userRoute.pointsOfInterest.length} —Ç–æ—á–∫–∞–º–∏');
      
      print('üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –¶–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    });
  });
}
